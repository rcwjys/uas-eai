generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id            String      @id @default(uuid())
  username           String      @unique @db.VarChar(50)
  user_email         String      @unique @db.VarChar(100)
  user_password      String      @db.VarChar(255)
  user_refresh_token String      @unique @db.VarChar(255)
  user_attempt       Int         @default(1)
  user_role          Role        @default(students)
  votes              Votes?
  aspirations        Aspiration?
}

model Candidate {
  candidate_id        String @id @default(uuid())
  candidate_name      String @unique @db.VarChar(50)
  candidate_biography String @db.Text
  candidate_vision    String @db.Text
  candidate_mission   String @db.Text
  candidate           Votes?
}

model Votes {
  vote_id      String    @id @default(uuid())
  created_at   DateTime  @default(now()) @map("created_at")
  voter_id     String    @unique
  voter        User      @relation(fields: [voter_id], references: [user_id], onDelete: Cascade)
  candidate_id String    @unique
  candidate    Candidate @relation(fields: [candidate_id], references: [candidate_id], onDelete: Cascade)
}

enum Role {
  students
  himpunan
  lecture
}

model Aspiration_Address {
  aspiration_address_id String      @id @default(uuid())
  aspiration_address    String      @unique
  aspirations           Aspiration?
}

model Aspiration {
  aspiration_id         String             @id @default(uuid())
  aspiration_status     Status             @default(pending)
  user_id               String             @unique
  user                  User               @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  aspiration_address_id String             @unique
  aspiration_address    Aspiration_Address @relation(fields: [aspiration_address_id], references: [aspiration_address_id], onDelete: Cascade)
}

enum Status {
  pending
  approved
  rejected
}
