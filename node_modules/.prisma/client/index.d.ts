
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Candidate
 * 
 */
export type Candidate = $Result.DefaultSelection<Prisma.$CandidatePayload>
/**
 * Model Vote
 * 
 */
export type Vote = $Result.DefaultSelection<Prisma.$VotePayload>
/**
 * Model Aspiration_Address
 * 
 */
export type Aspiration_Address = $Result.DefaultSelection<Prisma.$Aspiration_AddressPayload>
/**
 * Model Aspiration
 * 
 */
export type Aspiration = $Result.DefaultSelection<Prisma.$AspirationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  students: 'students',
  himpunan: 'himpunan',
  lecture: 'lecture',
  admin: 'admin'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Status: {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

export type Status = (typeof Status)[keyof typeof Status]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.candidate`: Exposes CRUD operations for the **Candidate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Candidates
    * const candidates = await prisma.candidate.findMany()
    * ```
    */
  get candidate(): Prisma.CandidateDelegate<ExtArgs>;

  /**
   * `prisma.vote`: Exposes CRUD operations for the **Vote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Votes
    * const votes = await prisma.vote.findMany()
    * ```
    */
  get vote(): Prisma.VoteDelegate<ExtArgs>;

  /**
   * `prisma.aspiration_Address`: Exposes CRUD operations for the **Aspiration_Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Aspiration_Addresses
    * const aspiration_Addresses = await prisma.aspiration_Address.findMany()
    * ```
    */
  get aspiration_Address(): Prisma.Aspiration_AddressDelegate<ExtArgs>;

  /**
   * `prisma.aspiration`: Exposes CRUD operations for the **Aspiration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Aspirations
    * const aspirations = await prisma.aspiration.findMany()
    * ```
    */
  get aspiration(): Prisma.AspirationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Candidate: 'Candidate',
    Vote: 'Vote',
    Aspiration_Address: 'Aspiration_Address',
    Aspiration: 'Aspiration'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'candidate' | 'vote' | 'aspiration_Address' | 'aspiration'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Candidate: {
        payload: Prisma.$CandidatePayload<ExtArgs>
        fields: Prisma.CandidateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidateFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidateFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          findFirst: {
            args: Prisma.CandidateFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidateFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          findMany: {
            args: Prisma.CandidateFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>[]
          }
          create: {
            args: Prisma.CandidateCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          createMany: {
            args: Prisma.CandidateCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CandidateDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          update: {
            args: Prisma.CandidateUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          deleteMany: {
            args: Prisma.CandidateDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CandidateUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CandidateUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          aggregate: {
            args: Prisma.CandidateAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCandidate>
          }
          groupBy: {
            args: Prisma.CandidateGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CandidateGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidateCountArgs<ExtArgs>,
            result: $Utils.Optional<CandidateCountAggregateOutputType> | number
          }
        }
      }
      Vote: {
        payload: Prisma.$VotePayload<ExtArgs>
        fields: Prisma.VoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VoteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VoteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          findFirst: {
            args: Prisma.VoteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VoteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          findMany: {
            args: Prisma.VoteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotePayload>[]
          }
          create: {
            args: Prisma.VoteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          createMany: {
            args: Prisma.VoteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VoteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          update: {
            args: Prisma.VoteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          deleteMany: {
            args: Prisma.VoteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VoteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VoteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          aggregate: {
            args: Prisma.VoteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVote>
          }
          groupBy: {
            args: Prisma.VoteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.VoteCountArgs<ExtArgs>,
            result: $Utils.Optional<VoteCountAggregateOutputType> | number
          }
        }
      }
      Aspiration_Address: {
        payload: Prisma.$Aspiration_AddressPayload<ExtArgs>
        fields: Prisma.Aspiration_AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Aspiration_AddressFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aspiration_AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Aspiration_AddressFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aspiration_AddressPayload>
          }
          findFirst: {
            args: Prisma.Aspiration_AddressFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aspiration_AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Aspiration_AddressFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aspiration_AddressPayload>
          }
          findMany: {
            args: Prisma.Aspiration_AddressFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aspiration_AddressPayload>[]
          }
          create: {
            args: Prisma.Aspiration_AddressCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aspiration_AddressPayload>
          }
          createMany: {
            args: Prisma.Aspiration_AddressCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Aspiration_AddressDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aspiration_AddressPayload>
          }
          update: {
            args: Prisma.Aspiration_AddressUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aspiration_AddressPayload>
          }
          deleteMany: {
            args: Prisma.Aspiration_AddressDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Aspiration_AddressUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Aspiration_AddressUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Aspiration_AddressPayload>
          }
          aggregate: {
            args: Prisma.Aspiration_AddressAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAspiration_Address>
          }
          groupBy: {
            args: Prisma.Aspiration_AddressGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Aspiration_AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.Aspiration_AddressCountArgs<ExtArgs>,
            result: $Utils.Optional<Aspiration_AddressCountAggregateOutputType> | number
          }
        }
      }
      Aspiration: {
        payload: Prisma.$AspirationPayload<ExtArgs>
        fields: Prisma.AspirationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AspirationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AspirationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AspirationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AspirationPayload>
          }
          findFirst: {
            args: Prisma.AspirationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AspirationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AspirationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AspirationPayload>
          }
          findMany: {
            args: Prisma.AspirationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AspirationPayload>[]
          }
          create: {
            args: Prisma.AspirationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AspirationPayload>
          }
          createMany: {
            args: Prisma.AspirationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AspirationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AspirationPayload>
          }
          update: {
            args: Prisma.AspirationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AspirationPayload>
          }
          deleteMany: {
            args: Prisma.AspirationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AspirationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AspirationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AspirationPayload>
          }
          aggregate: {
            args: Prisma.AspirationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAspiration>
          }
          groupBy: {
            args: Prisma.AspirationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AspirationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AspirationCountArgs<ExtArgs>,
            result: $Utils.Optional<AspirationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    votes: number
    aspirations: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    votes?: boolean | UserCountOutputTypeCountVotesArgs
    aspirations?: boolean | UserCountOutputTypeCountAspirationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAspirationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AspirationWhereInput
  }


  /**
   * Count Type CandidateCountOutputType
   */

  export type CandidateCountOutputType = {
    votes: number
  }

  export type CandidateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    votes?: boolean | CandidateCountOutputTypeCountVotesArgs
  }

  // Custom InputTypes
  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateCountOutputType
     */
    select?: CandidateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountVotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteWhereInput
  }


  /**
   * Count Type Aspiration_AddressCountOutputType
   */

  export type Aspiration_AddressCountOutputType = {
    aspirations: number
  }

  export type Aspiration_AddressCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aspirations?: boolean | Aspiration_AddressCountOutputTypeCountAspirationsArgs
  }

  // Custom InputTypes
  /**
   * Aspiration_AddressCountOutputType without action
   */
  export type Aspiration_AddressCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration_AddressCountOutputType
     */
    select?: Aspiration_AddressCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Aspiration_AddressCountOutputType without action
   */
  export type Aspiration_AddressCountOutputTypeCountAspirationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AspirationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    user_attempt: number | null
    token_created_at: number | null
    token_expired_at: number | null
  }

  export type UserSumAggregateOutputType = {
    user_attempt: number | null
    token_created_at: number | null
    token_expired_at: number | null
  }

  export type UserMinAggregateOutputType = {
    user_id: string | null
    username: string | null
    user_email: string | null
    user_password: string | null
    user_refresh_token: string | null
    user_attempt: number | null
    user_role: $Enums.Role | null
    token_created_at: number | null
    token_expired_at: number | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: string | null
    username: string | null
    user_email: string | null
    user_password: string | null
    user_refresh_token: string | null
    user_attempt: number | null
    user_role: $Enums.Role | null
    token_created_at: number | null
    token_expired_at: number | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    username: number
    user_email: number
    user_password: number
    user_refresh_token: number
    user_attempt: number
    user_role: number
    token_created_at: number
    token_expired_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    user_attempt?: true
    token_created_at?: true
    token_expired_at?: true
  }

  export type UserSumAggregateInputType = {
    user_attempt?: true
    token_created_at?: true
    token_expired_at?: true
  }

  export type UserMinAggregateInputType = {
    user_id?: true
    username?: true
    user_email?: true
    user_password?: true
    user_refresh_token?: true
    user_attempt?: true
    user_role?: true
    token_created_at?: true
    token_expired_at?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    username?: true
    user_email?: true
    user_password?: true
    user_refresh_token?: true
    user_attempt?: true
    user_role?: true
    token_created_at?: true
    token_expired_at?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    username?: true
    user_email?: true
    user_password?: true
    user_refresh_token?: true
    user_attempt?: true
    user_role?: true
    token_created_at?: true
    token_expired_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_id: string
    username: string
    user_email: string
    user_password: string
    user_refresh_token: string
    user_attempt: number
    user_role: $Enums.Role
    token_created_at: number | null
    token_expired_at: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    username?: boolean
    user_email?: boolean
    user_password?: boolean
    user_refresh_token?: boolean
    user_attempt?: boolean
    user_role?: boolean
    token_created_at?: boolean
    token_expired_at?: boolean
    votes?: boolean | User$votesArgs<ExtArgs>
    aspirations?: boolean | User$aspirationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    user_id?: boolean
    username?: boolean
    user_email?: boolean
    user_password?: boolean
    user_refresh_token?: boolean
    user_attempt?: boolean
    user_role?: boolean
    token_created_at?: boolean
    token_expired_at?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    votes?: boolean | User$votesArgs<ExtArgs>
    aspirations?: boolean | User$aspirationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      votes: Prisma.$VotePayload<ExtArgs>[]
      aspirations: Prisma.$AspirationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: string
      username: string
      user_email: string
      user_password: string
      user_refresh_token: string
      user_attempt: number
      user_role: $Enums.Role
      token_created_at: number | null
      token_expired_at: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    votes<T extends User$votesArgs<ExtArgs> = {}>(args?: Subset<T, User$votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, 'findMany'> | Null>;

    aspirations<T extends User$aspirationsArgs<ExtArgs> = {}>(args?: Subset<T, User$aspirationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AspirationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly user_id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly user_email: FieldRef<"User", 'String'>
    readonly user_password: FieldRef<"User", 'String'>
    readonly user_refresh_token: FieldRef<"User", 'String'>
    readonly user_attempt: FieldRef<"User", 'Int'>
    readonly user_role: FieldRef<"User", 'Role'>
    readonly token_created_at: FieldRef<"User", 'Int'>
    readonly token_expired_at: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.votes
   */
  export type User$votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    where?: VoteWhereInput
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    cursor?: VoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * User.aspirations
   */
  export type User$aspirationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration
     */
    select?: AspirationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AspirationInclude<ExtArgs> | null
    where?: AspirationWhereInput
    orderBy?: AspirationOrderByWithRelationInput | AspirationOrderByWithRelationInput[]
    cursor?: AspirationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AspirationScalarFieldEnum | AspirationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Candidate
   */

  export type AggregateCandidate = {
    _count: CandidateCountAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  export type CandidateMinAggregateOutputType = {
    candidate_id: string | null
    candidate_name: string | null
    candidate_slug: string | null
    candidate_biography: string | null
    candidate_vision: string | null
    candidate_mission: string | null
  }

  export type CandidateMaxAggregateOutputType = {
    candidate_id: string | null
    candidate_name: string | null
    candidate_slug: string | null
    candidate_biography: string | null
    candidate_vision: string | null
    candidate_mission: string | null
  }

  export type CandidateCountAggregateOutputType = {
    candidate_id: number
    candidate_name: number
    candidate_slug: number
    candidate_biography: number
    candidate_vision: number
    candidate_mission: number
    _all: number
  }


  export type CandidateMinAggregateInputType = {
    candidate_id?: true
    candidate_name?: true
    candidate_slug?: true
    candidate_biography?: true
    candidate_vision?: true
    candidate_mission?: true
  }

  export type CandidateMaxAggregateInputType = {
    candidate_id?: true
    candidate_name?: true
    candidate_slug?: true
    candidate_biography?: true
    candidate_vision?: true
    candidate_mission?: true
  }

  export type CandidateCountAggregateInputType = {
    candidate_id?: true
    candidate_name?: true
    candidate_slug?: true
    candidate_biography?: true
    candidate_vision?: true
    candidate_mission?: true
    _all?: true
  }

  export type CandidateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidate to aggregate.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Candidates
    **/
    _count?: true | CandidateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateMaxAggregateInputType
  }

  export type GetCandidateAggregateType<T extends CandidateAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidate[P]>
      : GetScalarType<T[P], AggregateCandidate[P]>
  }




  export type CandidateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateWhereInput
    orderBy?: CandidateOrderByWithAggregationInput | CandidateOrderByWithAggregationInput[]
    by: CandidateScalarFieldEnum[] | CandidateScalarFieldEnum
    having?: CandidateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateCountAggregateInputType | true
    _min?: CandidateMinAggregateInputType
    _max?: CandidateMaxAggregateInputType
  }

  export type CandidateGroupByOutputType = {
    candidate_id: string
    candidate_name: string
    candidate_slug: string | null
    candidate_biography: string
    candidate_vision: string
    candidate_mission: string
    _count: CandidateCountAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  type GetCandidateGroupByPayload<T extends CandidateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateGroupByOutputType[P]>
        }
      >
    >


  export type CandidateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    candidate_id?: boolean
    candidate_name?: boolean
    candidate_slug?: boolean
    candidate_biography?: boolean
    candidate_vision?: boolean
    candidate_mission?: boolean
    votes?: boolean | Candidate$votesArgs<ExtArgs>
    _count?: boolean | CandidateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidate"]>


  export type CandidateSelectScalar = {
    candidate_id?: boolean
    candidate_name?: boolean
    candidate_slug?: boolean
    candidate_biography?: boolean
    candidate_vision?: boolean
    candidate_mission?: boolean
  }

  export type CandidateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    votes?: boolean | Candidate$votesArgs<ExtArgs>
    _count?: boolean | CandidateCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CandidatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Candidate"
    objects: {
      votes: Prisma.$VotePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      candidate_id: string
      candidate_name: string
      candidate_slug: string | null
      candidate_biography: string
      candidate_vision: string
      candidate_mission: string
    }, ExtArgs["result"]["candidate"]>
    composites: {}
  }

  type CandidateGetPayload<S extends boolean | null | undefined | CandidateDefaultArgs> = $Result.GetResult<Prisma.$CandidatePayload, S>

  type CandidateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CandidateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CandidateCountAggregateInputType | true
    }

  export interface CandidateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Candidate'], meta: { name: 'Candidate' } }
    /**
     * Find zero or one Candidate that matches the filter.
     * @param {CandidateFindUniqueArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CandidateFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CandidateFindUniqueArgs<ExtArgs>>
    ): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Candidate that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CandidateFindUniqueOrThrowArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CandidateFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidateFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Candidate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindFirstArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CandidateFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidateFindFirstArgs<ExtArgs>>
    ): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Candidate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindFirstOrThrowArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CandidateFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidateFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Candidates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Candidates
     * const candidates = await prisma.candidate.findMany()
     * 
     * // Get first 10 Candidates
     * const candidates = await prisma.candidate.findMany({ take: 10 })
     * 
     * // Only select the `candidate_id`
     * const candidateWithCandidate_idOnly = await prisma.candidate.findMany({ select: { candidate_id: true } })
     * 
    **/
    findMany<T extends CandidateFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidateFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Candidate.
     * @param {CandidateCreateArgs} args - Arguments to create a Candidate.
     * @example
     * // Create one Candidate
     * const Candidate = await prisma.candidate.create({
     *   data: {
     *     // ... data to create a Candidate
     *   }
     * })
     * 
    **/
    create<T extends CandidateCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CandidateCreateArgs<ExtArgs>>
    ): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Candidates.
     * @param {CandidateCreateManyArgs} args - Arguments to create many Candidates.
     * @example
     * // Create many Candidates
     * const candidate = await prisma.candidate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CandidateCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidateCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Candidate.
     * @param {CandidateDeleteArgs} args - Arguments to delete one Candidate.
     * @example
     * // Delete one Candidate
     * const Candidate = await prisma.candidate.delete({
     *   where: {
     *     // ... filter to delete one Candidate
     *   }
     * })
     * 
    **/
    delete<T extends CandidateDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CandidateDeleteArgs<ExtArgs>>
    ): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Candidate.
     * @param {CandidateUpdateArgs} args - Arguments to update one Candidate.
     * @example
     * // Update one Candidate
     * const candidate = await prisma.candidate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CandidateUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CandidateUpdateArgs<ExtArgs>>
    ): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Candidates.
     * @param {CandidateDeleteManyArgs} args - Arguments to filter Candidates to delete.
     * @example
     * // Delete a few Candidates
     * const { count } = await prisma.candidate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CandidateDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidateDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Candidates
     * const candidate = await prisma.candidate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CandidateUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CandidateUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Candidate.
     * @param {CandidateUpsertArgs} args - Arguments to update or create a Candidate.
     * @example
     * // Update or create a Candidate
     * const candidate = await prisma.candidate.upsert({
     *   create: {
     *     // ... data to create a Candidate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Candidate we want to update
     *   }
     * })
    **/
    upsert<T extends CandidateUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CandidateUpsertArgs<ExtArgs>>
    ): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateCountArgs} args - Arguments to filter Candidates to count.
     * @example
     * // Count the number of Candidates
     * const count = await prisma.candidate.count({
     *   where: {
     *     // ... the filter for the Candidates we want to count
     *   }
     * })
    **/
    count<T extends CandidateCountArgs>(
      args?: Subset<T, CandidateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateAggregateArgs>(args: Subset<T, CandidateAggregateArgs>): Prisma.PrismaPromise<GetCandidateAggregateType<T>>

    /**
     * Group by Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateGroupByArgs['orderBy'] }
        : { orderBy?: CandidateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Candidate model
   */
  readonly fields: CandidateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Candidate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    votes<T extends Candidate$votesArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Candidate model
   */ 
  interface CandidateFieldRefs {
    readonly candidate_id: FieldRef<"Candidate", 'String'>
    readonly candidate_name: FieldRef<"Candidate", 'String'>
    readonly candidate_slug: FieldRef<"Candidate", 'String'>
    readonly candidate_biography: FieldRef<"Candidate", 'String'>
    readonly candidate_vision: FieldRef<"Candidate", 'String'>
    readonly candidate_mission: FieldRef<"Candidate", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Candidate findUnique
   */
  export type CandidateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate findUniqueOrThrow
   */
  export type CandidateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate findFirst
   */
  export type CandidateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidates.
     */
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate findFirstOrThrow
   */
  export type CandidateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidates.
     */
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate findMany
   */
  export type CandidateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidates to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate create
   */
  export type CandidateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The data needed to create a Candidate.
     */
    data: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
  }

  /**
   * Candidate createMany
   */
  export type CandidateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Candidates.
     */
    data: CandidateCreateManyInput | CandidateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Candidate update
   */
  export type CandidateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The data needed to update a Candidate.
     */
    data: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
    /**
     * Choose, which Candidate to update.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate updateMany
   */
  export type CandidateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Candidates.
     */
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyInput>
    /**
     * Filter which Candidates to update
     */
    where?: CandidateWhereInput
  }

  /**
   * Candidate upsert
   */
  export type CandidateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The filter to search for the Candidate to update in case it exists.
     */
    where: CandidateWhereUniqueInput
    /**
     * In case the Candidate found by the `where` argument doesn't exist, create a new Candidate with this data.
     */
    create: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
    /**
     * In case the Candidate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
  }

  /**
   * Candidate delete
   */
  export type CandidateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter which Candidate to delete.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate deleteMany
   */
  export type CandidateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidates to delete
     */
    where?: CandidateWhereInput
  }

  /**
   * Candidate.votes
   */
  export type Candidate$votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    where?: VoteWhereInput
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    cursor?: VoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Candidate without action
   */
  export type CandidateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
  }


  /**
   * Model Vote
   */

  export type AggregateVote = {
    _count: VoteCountAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  export type VoteMinAggregateOutputType = {
    vote_id: string | null
    created_at: Date | null
    voter_id: string | null
    candidate_id: string | null
  }

  export type VoteMaxAggregateOutputType = {
    vote_id: string | null
    created_at: Date | null
    voter_id: string | null
    candidate_id: string | null
  }

  export type VoteCountAggregateOutputType = {
    vote_id: number
    created_at: number
    voter_id: number
    candidate_id: number
    _all: number
  }


  export type VoteMinAggregateInputType = {
    vote_id?: true
    created_at?: true
    voter_id?: true
    candidate_id?: true
  }

  export type VoteMaxAggregateInputType = {
    vote_id?: true
    created_at?: true
    voter_id?: true
    candidate_id?: true
  }

  export type VoteCountAggregateInputType = {
    vote_id?: true
    created_at?: true
    voter_id?: true
    candidate_id?: true
    _all?: true
  }

  export type VoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vote to aggregate.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Votes
    **/
    _count?: true | VoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoteMaxAggregateInputType
  }

  export type GetVoteAggregateType<T extends VoteAggregateArgs> = {
        [P in keyof T & keyof AggregateVote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVote[P]>
      : GetScalarType<T[P], AggregateVote[P]>
  }




  export type VoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteWhereInput
    orderBy?: VoteOrderByWithAggregationInput | VoteOrderByWithAggregationInput[]
    by: VoteScalarFieldEnum[] | VoteScalarFieldEnum
    having?: VoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoteCountAggregateInputType | true
    _min?: VoteMinAggregateInputType
    _max?: VoteMaxAggregateInputType
  }

  export type VoteGroupByOutputType = {
    vote_id: string
    created_at: Date
    voter_id: string
    candidate_id: string
    _count: VoteCountAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  type GetVoteGroupByPayload<T extends VoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoteGroupByOutputType[P]>
            : GetScalarType<T[P], VoteGroupByOutputType[P]>
        }
      >
    >


  export type VoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    vote_id?: boolean
    created_at?: boolean
    voter_id?: boolean
    candidate_id?: boolean
    voter?: boolean | UserDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vote"]>


  export type VoteSelectScalar = {
    vote_id?: boolean
    created_at?: boolean
    voter_id?: boolean
    candidate_id?: boolean
  }

  export type VoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    voter?: boolean | UserDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }

  export type $VotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vote"
    objects: {
      voter: Prisma.$UserPayload<ExtArgs>
      candidate: Prisma.$CandidatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      vote_id: string
      created_at: Date
      voter_id: string
      candidate_id: string
    }, ExtArgs["result"]["vote"]>
    composites: {}
  }

  type VoteGetPayload<S extends boolean | null | undefined | VoteDefaultArgs> = $Result.GetResult<Prisma.$VotePayload, S>

  type VoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VoteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VoteCountAggregateInputType | true
    }

  export interface VoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vote'], meta: { name: 'Vote' } }
    /**
     * Find zero or one Vote that matches the filter.
     * @param {VoteFindUniqueArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VoteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VoteFindUniqueArgs<ExtArgs>>
    ): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Vote that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VoteFindUniqueOrThrowArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VoteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VoteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Vote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindFirstArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VoteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VoteFindFirstArgs<ExtArgs>>
    ): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Vote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindFirstOrThrowArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VoteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VoteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Votes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Votes
     * const votes = await prisma.vote.findMany()
     * 
     * // Get first 10 Votes
     * const votes = await prisma.vote.findMany({ take: 10 })
     * 
     * // Only select the `vote_id`
     * const voteWithVote_idOnly = await prisma.vote.findMany({ select: { vote_id: true } })
     * 
    **/
    findMany<T extends VoteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VoteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Vote.
     * @param {VoteCreateArgs} args - Arguments to create a Vote.
     * @example
     * // Create one Vote
     * const Vote = await prisma.vote.create({
     *   data: {
     *     // ... data to create a Vote
     *   }
     * })
     * 
    **/
    create<T extends VoteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VoteCreateArgs<ExtArgs>>
    ): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Votes.
     * @param {VoteCreateManyArgs} args - Arguments to create many Votes.
     * @example
     * // Create many Votes
     * const vote = await prisma.vote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends VoteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VoteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vote.
     * @param {VoteDeleteArgs} args - Arguments to delete one Vote.
     * @example
     * // Delete one Vote
     * const Vote = await prisma.vote.delete({
     *   where: {
     *     // ... filter to delete one Vote
     *   }
     * })
     * 
    **/
    delete<T extends VoteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VoteDeleteArgs<ExtArgs>>
    ): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Vote.
     * @param {VoteUpdateArgs} args - Arguments to update one Vote.
     * @example
     * // Update one Vote
     * const vote = await prisma.vote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VoteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VoteUpdateArgs<ExtArgs>>
    ): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Votes.
     * @param {VoteDeleteManyArgs} args - Arguments to filter Votes to delete.
     * @example
     * // Delete a few Votes
     * const { count } = await prisma.vote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VoteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VoteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Votes
     * const vote = await prisma.vote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VoteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VoteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vote.
     * @param {VoteUpsertArgs} args - Arguments to update or create a Vote.
     * @example
     * // Update or create a Vote
     * const vote = await prisma.vote.upsert({
     *   create: {
     *     // ... data to create a Vote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vote we want to update
     *   }
     * })
    **/
    upsert<T extends VoteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VoteUpsertArgs<ExtArgs>>
    ): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteCountArgs} args - Arguments to filter Votes to count.
     * @example
     * // Count the number of Votes
     * const count = await prisma.vote.count({
     *   where: {
     *     // ... the filter for the Votes we want to count
     *   }
     * })
    **/
    count<T extends VoteCountArgs>(
      args?: Subset<T, VoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoteAggregateArgs>(args: Subset<T, VoteAggregateArgs>): Prisma.PrismaPromise<GetVoteAggregateType<T>>

    /**
     * Group by Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoteGroupByArgs['orderBy'] }
        : { orderBy?: VoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vote model
   */
  readonly fields: VoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    voter<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Vote model
   */ 
  interface VoteFieldRefs {
    readonly vote_id: FieldRef<"Vote", 'String'>
    readonly created_at: FieldRef<"Vote", 'DateTime'>
    readonly voter_id: FieldRef<"Vote", 'String'>
    readonly candidate_id: FieldRef<"Vote", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Vote findUnique
   */
  export type VoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote findUniqueOrThrow
   */
  export type VoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote findFirst
   */
  export type VoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votes.
     */
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Vote findFirstOrThrow
   */
  export type VoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votes.
     */
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Vote findMany
   */
  export type VoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Votes to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Vote create
   */
  export type VoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Vote.
     */
    data: XOR<VoteCreateInput, VoteUncheckedCreateInput>
  }

  /**
   * Vote createMany
   */
  export type VoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Votes.
     */
    data: VoteCreateManyInput | VoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vote update
   */
  export type VoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Vote.
     */
    data: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
    /**
     * Choose, which Vote to update.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote updateMany
   */
  export type VoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Votes.
     */
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyInput>
    /**
     * Filter which Votes to update
     */
    where?: VoteWhereInput
  }

  /**
   * Vote upsert
   */
  export type VoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Vote to update in case it exists.
     */
    where: VoteWhereUniqueInput
    /**
     * In case the Vote found by the `where` argument doesn't exist, create a new Vote with this data.
     */
    create: XOR<VoteCreateInput, VoteUncheckedCreateInput>
    /**
     * In case the Vote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
  }

  /**
   * Vote delete
   */
  export type VoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter which Vote to delete.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote deleteMany
   */
  export type VoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Votes to delete
     */
    where?: VoteWhereInput
  }

  /**
   * Vote without action
   */
  export type VoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
  }


  /**
   * Model Aspiration_Address
   */

  export type AggregateAspiration_Address = {
    _count: Aspiration_AddressCountAggregateOutputType | null
    _min: Aspiration_AddressMinAggregateOutputType | null
    _max: Aspiration_AddressMaxAggregateOutputType | null
  }

  export type Aspiration_AddressMinAggregateOutputType = {
    aspiration_address_id: string | null
    aspiration_address: string | null
  }

  export type Aspiration_AddressMaxAggregateOutputType = {
    aspiration_address_id: string | null
    aspiration_address: string | null
  }

  export type Aspiration_AddressCountAggregateOutputType = {
    aspiration_address_id: number
    aspiration_address: number
    _all: number
  }


  export type Aspiration_AddressMinAggregateInputType = {
    aspiration_address_id?: true
    aspiration_address?: true
  }

  export type Aspiration_AddressMaxAggregateInputType = {
    aspiration_address_id?: true
    aspiration_address?: true
  }

  export type Aspiration_AddressCountAggregateInputType = {
    aspiration_address_id?: true
    aspiration_address?: true
    _all?: true
  }

  export type Aspiration_AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aspiration_Address to aggregate.
     */
    where?: Aspiration_AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aspiration_Addresses to fetch.
     */
    orderBy?: Aspiration_AddressOrderByWithRelationInput | Aspiration_AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Aspiration_AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aspiration_Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aspiration_Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Aspiration_Addresses
    **/
    _count?: true | Aspiration_AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Aspiration_AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Aspiration_AddressMaxAggregateInputType
  }

  export type GetAspiration_AddressAggregateType<T extends Aspiration_AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAspiration_Address]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAspiration_Address[P]>
      : GetScalarType<T[P], AggregateAspiration_Address[P]>
  }




  export type Aspiration_AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Aspiration_AddressWhereInput
    orderBy?: Aspiration_AddressOrderByWithAggregationInput | Aspiration_AddressOrderByWithAggregationInput[]
    by: Aspiration_AddressScalarFieldEnum[] | Aspiration_AddressScalarFieldEnum
    having?: Aspiration_AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Aspiration_AddressCountAggregateInputType | true
    _min?: Aspiration_AddressMinAggregateInputType
    _max?: Aspiration_AddressMaxAggregateInputType
  }

  export type Aspiration_AddressGroupByOutputType = {
    aspiration_address_id: string
    aspiration_address: string
    _count: Aspiration_AddressCountAggregateOutputType | null
    _min: Aspiration_AddressMinAggregateOutputType | null
    _max: Aspiration_AddressMaxAggregateOutputType | null
  }

  type GetAspiration_AddressGroupByPayload<T extends Aspiration_AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Aspiration_AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Aspiration_AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Aspiration_AddressGroupByOutputType[P]>
            : GetScalarType<T[P], Aspiration_AddressGroupByOutputType[P]>
        }
      >
    >


  export type Aspiration_AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    aspiration_address_id?: boolean
    aspiration_address?: boolean
    aspirations?: boolean | Aspiration_Address$aspirationsArgs<ExtArgs>
    _count?: boolean | Aspiration_AddressCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aspiration_Address"]>


  export type Aspiration_AddressSelectScalar = {
    aspiration_address_id?: boolean
    aspiration_address?: boolean
  }

  export type Aspiration_AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aspirations?: boolean | Aspiration_Address$aspirationsArgs<ExtArgs>
    _count?: boolean | Aspiration_AddressCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $Aspiration_AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Aspiration_Address"
    objects: {
      aspirations: Prisma.$AspirationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      aspiration_address_id: string
      aspiration_address: string
    }, ExtArgs["result"]["aspiration_Address"]>
    composites: {}
  }

  type Aspiration_AddressGetPayload<S extends boolean | null | undefined | Aspiration_AddressDefaultArgs> = $Result.GetResult<Prisma.$Aspiration_AddressPayload, S>

  type Aspiration_AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Aspiration_AddressFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Aspiration_AddressCountAggregateInputType | true
    }

  export interface Aspiration_AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Aspiration_Address'], meta: { name: 'Aspiration_Address' } }
    /**
     * Find zero or one Aspiration_Address that matches the filter.
     * @param {Aspiration_AddressFindUniqueArgs} args - Arguments to find a Aspiration_Address
     * @example
     * // Get one Aspiration_Address
     * const aspiration_Address = await prisma.aspiration_Address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Aspiration_AddressFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Aspiration_AddressFindUniqueArgs<ExtArgs>>
    ): Prisma__Aspiration_AddressClient<$Result.GetResult<Prisma.$Aspiration_AddressPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Aspiration_Address that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {Aspiration_AddressFindUniqueOrThrowArgs} args - Arguments to find a Aspiration_Address
     * @example
     * // Get one Aspiration_Address
     * const aspiration_Address = await prisma.aspiration_Address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Aspiration_AddressFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Aspiration_AddressFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Aspiration_AddressClient<$Result.GetResult<Prisma.$Aspiration_AddressPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Aspiration_Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aspiration_AddressFindFirstArgs} args - Arguments to find a Aspiration_Address
     * @example
     * // Get one Aspiration_Address
     * const aspiration_Address = await prisma.aspiration_Address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Aspiration_AddressFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Aspiration_AddressFindFirstArgs<ExtArgs>>
    ): Prisma__Aspiration_AddressClient<$Result.GetResult<Prisma.$Aspiration_AddressPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Aspiration_Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aspiration_AddressFindFirstOrThrowArgs} args - Arguments to find a Aspiration_Address
     * @example
     * // Get one Aspiration_Address
     * const aspiration_Address = await prisma.aspiration_Address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Aspiration_AddressFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Aspiration_AddressFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Aspiration_AddressClient<$Result.GetResult<Prisma.$Aspiration_AddressPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Aspiration_Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aspiration_AddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Aspiration_Addresses
     * const aspiration_Addresses = await prisma.aspiration_Address.findMany()
     * 
     * // Get first 10 Aspiration_Addresses
     * const aspiration_Addresses = await prisma.aspiration_Address.findMany({ take: 10 })
     * 
     * // Only select the `aspiration_address_id`
     * const aspiration_AddressWithAspiration_address_idOnly = await prisma.aspiration_Address.findMany({ select: { aspiration_address_id: true } })
     * 
    **/
    findMany<T extends Aspiration_AddressFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Aspiration_AddressFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Aspiration_AddressPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Aspiration_Address.
     * @param {Aspiration_AddressCreateArgs} args - Arguments to create a Aspiration_Address.
     * @example
     * // Create one Aspiration_Address
     * const Aspiration_Address = await prisma.aspiration_Address.create({
     *   data: {
     *     // ... data to create a Aspiration_Address
     *   }
     * })
     * 
    **/
    create<T extends Aspiration_AddressCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Aspiration_AddressCreateArgs<ExtArgs>>
    ): Prisma__Aspiration_AddressClient<$Result.GetResult<Prisma.$Aspiration_AddressPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Aspiration_Addresses.
     * @param {Aspiration_AddressCreateManyArgs} args - Arguments to create many Aspiration_Addresses.
     * @example
     * // Create many Aspiration_Addresses
     * const aspiration_Address = await prisma.aspiration_Address.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends Aspiration_AddressCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Aspiration_AddressCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Aspiration_Address.
     * @param {Aspiration_AddressDeleteArgs} args - Arguments to delete one Aspiration_Address.
     * @example
     * // Delete one Aspiration_Address
     * const Aspiration_Address = await prisma.aspiration_Address.delete({
     *   where: {
     *     // ... filter to delete one Aspiration_Address
     *   }
     * })
     * 
    **/
    delete<T extends Aspiration_AddressDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Aspiration_AddressDeleteArgs<ExtArgs>>
    ): Prisma__Aspiration_AddressClient<$Result.GetResult<Prisma.$Aspiration_AddressPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Aspiration_Address.
     * @param {Aspiration_AddressUpdateArgs} args - Arguments to update one Aspiration_Address.
     * @example
     * // Update one Aspiration_Address
     * const aspiration_Address = await prisma.aspiration_Address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Aspiration_AddressUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Aspiration_AddressUpdateArgs<ExtArgs>>
    ): Prisma__Aspiration_AddressClient<$Result.GetResult<Prisma.$Aspiration_AddressPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Aspiration_Addresses.
     * @param {Aspiration_AddressDeleteManyArgs} args - Arguments to filter Aspiration_Addresses to delete.
     * @example
     * // Delete a few Aspiration_Addresses
     * const { count } = await prisma.aspiration_Address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Aspiration_AddressDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Aspiration_AddressDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aspiration_Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aspiration_AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Aspiration_Addresses
     * const aspiration_Address = await prisma.aspiration_Address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Aspiration_AddressUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Aspiration_AddressUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Aspiration_Address.
     * @param {Aspiration_AddressUpsertArgs} args - Arguments to update or create a Aspiration_Address.
     * @example
     * // Update or create a Aspiration_Address
     * const aspiration_Address = await prisma.aspiration_Address.upsert({
     *   create: {
     *     // ... data to create a Aspiration_Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aspiration_Address we want to update
     *   }
     * })
    **/
    upsert<T extends Aspiration_AddressUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Aspiration_AddressUpsertArgs<ExtArgs>>
    ): Prisma__Aspiration_AddressClient<$Result.GetResult<Prisma.$Aspiration_AddressPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Aspiration_Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aspiration_AddressCountArgs} args - Arguments to filter Aspiration_Addresses to count.
     * @example
     * // Count the number of Aspiration_Addresses
     * const count = await prisma.aspiration_Address.count({
     *   where: {
     *     // ... the filter for the Aspiration_Addresses we want to count
     *   }
     * })
    **/
    count<T extends Aspiration_AddressCountArgs>(
      args?: Subset<T, Aspiration_AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Aspiration_AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aspiration_Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aspiration_AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Aspiration_AddressAggregateArgs>(args: Subset<T, Aspiration_AddressAggregateArgs>): Prisma.PrismaPromise<GetAspiration_AddressAggregateType<T>>

    /**
     * Group by Aspiration_Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aspiration_AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Aspiration_AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Aspiration_AddressGroupByArgs['orderBy'] }
        : { orderBy?: Aspiration_AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Aspiration_AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAspiration_AddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Aspiration_Address model
   */
  readonly fields: Aspiration_AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Aspiration_Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Aspiration_AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    aspirations<T extends Aspiration_Address$aspirationsArgs<ExtArgs> = {}>(args?: Subset<T, Aspiration_Address$aspirationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AspirationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Aspiration_Address model
   */ 
  interface Aspiration_AddressFieldRefs {
    readonly aspiration_address_id: FieldRef<"Aspiration_Address", 'String'>
    readonly aspiration_address: FieldRef<"Aspiration_Address", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Aspiration_Address findUnique
   */
  export type Aspiration_AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration_Address
     */
    select?: Aspiration_AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Aspiration_AddressInclude<ExtArgs> | null
    /**
     * Filter, which Aspiration_Address to fetch.
     */
    where: Aspiration_AddressWhereUniqueInput
  }

  /**
   * Aspiration_Address findUniqueOrThrow
   */
  export type Aspiration_AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration_Address
     */
    select?: Aspiration_AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Aspiration_AddressInclude<ExtArgs> | null
    /**
     * Filter, which Aspiration_Address to fetch.
     */
    where: Aspiration_AddressWhereUniqueInput
  }

  /**
   * Aspiration_Address findFirst
   */
  export type Aspiration_AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration_Address
     */
    select?: Aspiration_AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Aspiration_AddressInclude<ExtArgs> | null
    /**
     * Filter, which Aspiration_Address to fetch.
     */
    where?: Aspiration_AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aspiration_Addresses to fetch.
     */
    orderBy?: Aspiration_AddressOrderByWithRelationInput | Aspiration_AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aspiration_Addresses.
     */
    cursor?: Aspiration_AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aspiration_Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aspiration_Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aspiration_Addresses.
     */
    distinct?: Aspiration_AddressScalarFieldEnum | Aspiration_AddressScalarFieldEnum[]
  }

  /**
   * Aspiration_Address findFirstOrThrow
   */
  export type Aspiration_AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration_Address
     */
    select?: Aspiration_AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Aspiration_AddressInclude<ExtArgs> | null
    /**
     * Filter, which Aspiration_Address to fetch.
     */
    where?: Aspiration_AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aspiration_Addresses to fetch.
     */
    orderBy?: Aspiration_AddressOrderByWithRelationInput | Aspiration_AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aspiration_Addresses.
     */
    cursor?: Aspiration_AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aspiration_Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aspiration_Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aspiration_Addresses.
     */
    distinct?: Aspiration_AddressScalarFieldEnum | Aspiration_AddressScalarFieldEnum[]
  }

  /**
   * Aspiration_Address findMany
   */
  export type Aspiration_AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration_Address
     */
    select?: Aspiration_AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Aspiration_AddressInclude<ExtArgs> | null
    /**
     * Filter, which Aspiration_Addresses to fetch.
     */
    where?: Aspiration_AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aspiration_Addresses to fetch.
     */
    orderBy?: Aspiration_AddressOrderByWithRelationInput | Aspiration_AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Aspiration_Addresses.
     */
    cursor?: Aspiration_AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aspiration_Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aspiration_Addresses.
     */
    skip?: number
    distinct?: Aspiration_AddressScalarFieldEnum | Aspiration_AddressScalarFieldEnum[]
  }

  /**
   * Aspiration_Address create
   */
  export type Aspiration_AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration_Address
     */
    select?: Aspiration_AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Aspiration_AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Aspiration_Address.
     */
    data: XOR<Aspiration_AddressCreateInput, Aspiration_AddressUncheckedCreateInput>
  }

  /**
   * Aspiration_Address createMany
   */
  export type Aspiration_AddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Aspiration_Addresses.
     */
    data: Aspiration_AddressCreateManyInput | Aspiration_AddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Aspiration_Address update
   */
  export type Aspiration_AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration_Address
     */
    select?: Aspiration_AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Aspiration_AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Aspiration_Address.
     */
    data: XOR<Aspiration_AddressUpdateInput, Aspiration_AddressUncheckedUpdateInput>
    /**
     * Choose, which Aspiration_Address to update.
     */
    where: Aspiration_AddressWhereUniqueInput
  }

  /**
   * Aspiration_Address updateMany
   */
  export type Aspiration_AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Aspiration_Addresses.
     */
    data: XOR<Aspiration_AddressUpdateManyMutationInput, Aspiration_AddressUncheckedUpdateManyInput>
    /**
     * Filter which Aspiration_Addresses to update
     */
    where?: Aspiration_AddressWhereInput
  }

  /**
   * Aspiration_Address upsert
   */
  export type Aspiration_AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration_Address
     */
    select?: Aspiration_AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Aspiration_AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Aspiration_Address to update in case it exists.
     */
    where: Aspiration_AddressWhereUniqueInput
    /**
     * In case the Aspiration_Address found by the `where` argument doesn't exist, create a new Aspiration_Address with this data.
     */
    create: XOR<Aspiration_AddressCreateInput, Aspiration_AddressUncheckedCreateInput>
    /**
     * In case the Aspiration_Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Aspiration_AddressUpdateInput, Aspiration_AddressUncheckedUpdateInput>
  }

  /**
   * Aspiration_Address delete
   */
  export type Aspiration_AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration_Address
     */
    select?: Aspiration_AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Aspiration_AddressInclude<ExtArgs> | null
    /**
     * Filter which Aspiration_Address to delete.
     */
    where: Aspiration_AddressWhereUniqueInput
  }

  /**
   * Aspiration_Address deleteMany
   */
  export type Aspiration_AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aspiration_Addresses to delete
     */
    where?: Aspiration_AddressWhereInput
  }

  /**
   * Aspiration_Address.aspirations
   */
  export type Aspiration_Address$aspirationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration
     */
    select?: AspirationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AspirationInclude<ExtArgs> | null
    where?: AspirationWhereInput
    orderBy?: AspirationOrderByWithRelationInput | AspirationOrderByWithRelationInput[]
    cursor?: AspirationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AspirationScalarFieldEnum | AspirationScalarFieldEnum[]
  }

  /**
   * Aspiration_Address without action
   */
  export type Aspiration_AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration_Address
     */
    select?: Aspiration_AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Aspiration_AddressInclude<ExtArgs> | null
  }


  /**
   * Model Aspiration
   */

  export type AggregateAspiration = {
    _count: AspirationCountAggregateOutputType | null
    _min: AspirationMinAggregateOutputType | null
    _max: AspirationMaxAggregateOutputType | null
  }

  export type AspirationMinAggregateOutputType = {
    aspiration_id: string | null
    aspiration_status: $Enums.Status | null
    aspiration: string | null
    user_id: string | null
    aspiration_address_id: string | null
  }

  export type AspirationMaxAggregateOutputType = {
    aspiration_id: string | null
    aspiration_status: $Enums.Status | null
    aspiration: string | null
    user_id: string | null
    aspiration_address_id: string | null
  }

  export type AspirationCountAggregateOutputType = {
    aspiration_id: number
    aspiration_status: number
    aspiration: number
    user_id: number
    aspiration_address_id: number
    _all: number
  }


  export type AspirationMinAggregateInputType = {
    aspiration_id?: true
    aspiration_status?: true
    aspiration?: true
    user_id?: true
    aspiration_address_id?: true
  }

  export type AspirationMaxAggregateInputType = {
    aspiration_id?: true
    aspiration_status?: true
    aspiration?: true
    user_id?: true
    aspiration_address_id?: true
  }

  export type AspirationCountAggregateInputType = {
    aspiration_id?: true
    aspiration_status?: true
    aspiration?: true
    user_id?: true
    aspiration_address_id?: true
    _all?: true
  }

  export type AspirationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aspiration to aggregate.
     */
    where?: AspirationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aspirations to fetch.
     */
    orderBy?: AspirationOrderByWithRelationInput | AspirationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AspirationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aspirations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aspirations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Aspirations
    **/
    _count?: true | AspirationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AspirationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AspirationMaxAggregateInputType
  }

  export type GetAspirationAggregateType<T extends AspirationAggregateArgs> = {
        [P in keyof T & keyof AggregateAspiration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAspiration[P]>
      : GetScalarType<T[P], AggregateAspiration[P]>
  }




  export type AspirationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AspirationWhereInput
    orderBy?: AspirationOrderByWithAggregationInput | AspirationOrderByWithAggregationInput[]
    by: AspirationScalarFieldEnum[] | AspirationScalarFieldEnum
    having?: AspirationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AspirationCountAggregateInputType | true
    _min?: AspirationMinAggregateInputType
    _max?: AspirationMaxAggregateInputType
  }

  export type AspirationGroupByOutputType = {
    aspiration_id: string
    aspiration_status: $Enums.Status
    aspiration: string
    user_id: string
    aspiration_address_id: string
    _count: AspirationCountAggregateOutputType | null
    _min: AspirationMinAggregateOutputType | null
    _max: AspirationMaxAggregateOutputType | null
  }

  type GetAspirationGroupByPayload<T extends AspirationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AspirationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AspirationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AspirationGroupByOutputType[P]>
            : GetScalarType<T[P], AspirationGroupByOutputType[P]>
        }
      >
    >


  export type AspirationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    aspiration_id?: boolean
    aspiration_status?: boolean
    aspiration?: boolean
    user_id?: boolean
    aspiration_address_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    aspiration_address?: boolean | Aspiration_AddressDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aspiration"]>


  export type AspirationSelectScalar = {
    aspiration_id?: boolean
    aspiration_status?: boolean
    aspiration?: boolean
    user_id?: boolean
    aspiration_address_id?: boolean
  }

  export type AspirationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    aspiration_address?: boolean | Aspiration_AddressDefaultArgs<ExtArgs>
  }

  export type $AspirationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Aspiration"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      aspiration_address: Prisma.$Aspiration_AddressPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      aspiration_id: string
      aspiration_status: $Enums.Status
      aspiration: string
      user_id: string
      aspiration_address_id: string
    }, ExtArgs["result"]["aspiration"]>
    composites: {}
  }

  type AspirationGetPayload<S extends boolean | null | undefined | AspirationDefaultArgs> = $Result.GetResult<Prisma.$AspirationPayload, S>

  type AspirationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AspirationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AspirationCountAggregateInputType | true
    }

  export interface AspirationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Aspiration'], meta: { name: 'Aspiration' } }
    /**
     * Find zero or one Aspiration that matches the filter.
     * @param {AspirationFindUniqueArgs} args - Arguments to find a Aspiration
     * @example
     * // Get one Aspiration
     * const aspiration = await prisma.aspiration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AspirationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AspirationFindUniqueArgs<ExtArgs>>
    ): Prisma__AspirationClient<$Result.GetResult<Prisma.$AspirationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Aspiration that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AspirationFindUniqueOrThrowArgs} args - Arguments to find a Aspiration
     * @example
     * // Get one Aspiration
     * const aspiration = await prisma.aspiration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AspirationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AspirationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AspirationClient<$Result.GetResult<Prisma.$AspirationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Aspiration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AspirationFindFirstArgs} args - Arguments to find a Aspiration
     * @example
     * // Get one Aspiration
     * const aspiration = await prisma.aspiration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AspirationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AspirationFindFirstArgs<ExtArgs>>
    ): Prisma__AspirationClient<$Result.GetResult<Prisma.$AspirationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Aspiration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AspirationFindFirstOrThrowArgs} args - Arguments to find a Aspiration
     * @example
     * // Get one Aspiration
     * const aspiration = await prisma.aspiration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AspirationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AspirationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AspirationClient<$Result.GetResult<Prisma.$AspirationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Aspirations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AspirationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Aspirations
     * const aspirations = await prisma.aspiration.findMany()
     * 
     * // Get first 10 Aspirations
     * const aspirations = await prisma.aspiration.findMany({ take: 10 })
     * 
     * // Only select the `aspiration_id`
     * const aspirationWithAspiration_idOnly = await prisma.aspiration.findMany({ select: { aspiration_id: true } })
     * 
    **/
    findMany<T extends AspirationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AspirationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AspirationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Aspiration.
     * @param {AspirationCreateArgs} args - Arguments to create a Aspiration.
     * @example
     * // Create one Aspiration
     * const Aspiration = await prisma.aspiration.create({
     *   data: {
     *     // ... data to create a Aspiration
     *   }
     * })
     * 
    **/
    create<T extends AspirationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AspirationCreateArgs<ExtArgs>>
    ): Prisma__AspirationClient<$Result.GetResult<Prisma.$AspirationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Aspirations.
     * @param {AspirationCreateManyArgs} args - Arguments to create many Aspirations.
     * @example
     * // Create many Aspirations
     * const aspiration = await prisma.aspiration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends AspirationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AspirationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Aspiration.
     * @param {AspirationDeleteArgs} args - Arguments to delete one Aspiration.
     * @example
     * // Delete one Aspiration
     * const Aspiration = await prisma.aspiration.delete({
     *   where: {
     *     // ... filter to delete one Aspiration
     *   }
     * })
     * 
    **/
    delete<T extends AspirationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AspirationDeleteArgs<ExtArgs>>
    ): Prisma__AspirationClient<$Result.GetResult<Prisma.$AspirationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Aspiration.
     * @param {AspirationUpdateArgs} args - Arguments to update one Aspiration.
     * @example
     * // Update one Aspiration
     * const aspiration = await prisma.aspiration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AspirationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AspirationUpdateArgs<ExtArgs>>
    ): Prisma__AspirationClient<$Result.GetResult<Prisma.$AspirationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Aspirations.
     * @param {AspirationDeleteManyArgs} args - Arguments to filter Aspirations to delete.
     * @example
     * // Delete a few Aspirations
     * const { count } = await prisma.aspiration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AspirationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AspirationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aspirations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AspirationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Aspirations
     * const aspiration = await prisma.aspiration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AspirationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AspirationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Aspiration.
     * @param {AspirationUpsertArgs} args - Arguments to update or create a Aspiration.
     * @example
     * // Update or create a Aspiration
     * const aspiration = await prisma.aspiration.upsert({
     *   create: {
     *     // ... data to create a Aspiration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aspiration we want to update
     *   }
     * })
    **/
    upsert<T extends AspirationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AspirationUpsertArgs<ExtArgs>>
    ): Prisma__AspirationClient<$Result.GetResult<Prisma.$AspirationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Aspirations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AspirationCountArgs} args - Arguments to filter Aspirations to count.
     * @example
     * // Count the number of Aspirations
     * const count = await prisma.aspiration.count({
     *   where: {
     *     // ... the filter for the Aspirations we want to count
     *   }
     * })
    **/
    count<T extends AspirationCountArgs>(
      args?: Subset<T, AspirationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AspirationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aspiration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AspirationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AspirationAggregateArgs>(args: Subset<T, AspirationAggregateArgs>): Prisma.PrismaPromise<GetAspirationAggregateType<T>>

    /**
     * Group by Aspiration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AspirationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AspirationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AspirationGroupByArgs['orderBy'] }
        : { orderBy?: AspirationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AspirationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAspirationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Aspiration model
   */
  readonly fields: AspirationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Aspiration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AspirationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    aspiration_address<T extends Aspiration_AddressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Aspiration_AddressDefaultArgs<ExtArgs>>): Prisma__Aspiration_AddressClient<$Result.GetResult<Prisma.$Aspiration_AddressPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Aspiration model
   */ 
  interface AspirationFieldRefs {
    readonly aspiration_id: FieldRef<"Aspiration", 'String'>
    readonly aspiration_status: FieldRef<"Aspiration", 'Status'>
    readonly aspiration: FieldRef<"Aspiration", 'String'>
    readonly user_id: FieldRef<"Aspiration", 'String'>
    readonly aspiration_address_id: FieldRef<"Aspiration", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Aspiration findUnique
   */
  export type AspirationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration
     */
    select?: AspirationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AspirationInclude<ExtArgs> | null
    /**
     * Filter, which Aspiration to fetch.
     */
    where: AspirationWhereUniqueInput
  }

  /**
   * Aspiration findUniqueOrThrow
   */
  export type AspirationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration
     */
    select?: AspirationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AspirationInclude<ExtArgs> | null
    /**
     * Filter, which Aspiration to fetch.
     */
    where: AspirationWhereUniqueInput
  }

  /**
   * Aspiration findFirst
   */
  export type AspirationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration
     */
    select?: AspirationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AspirationInclude<ExtArgs> | null
    /**
     * Filter, which Aspiration to fetch.
     */
    where?: AspirationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aspirations to fetch.
     */
    orderBy?: AspirationOrderByWithRelationInput | AspirationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aspirations.
     */
    cursor?: AspirationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aspirations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aspirations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aspirations.
     */
    distinct?: AspirationScalarFieldEnum | AspirationScalarFieldEnum[]
  }

  /**
   * Aspiration findFirstOrThrow
   */
  export type AspirationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration
     */
    select?: AspirationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AspirationInclude<ExtArgs> | null
    /**
     * Filter, which Aspiration to fetch.
     */
    where?: AspirationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aspirations to fetch.
     */
    orderBy?: AspirationOrderByWithRelationInput | AspirationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aspirations.
     */
    cursor?: AspirationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aspirations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aspirations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aspirations.
     */
    distinct?: AspirationScalarFieldEnum | AspirationScalarFieldEnum[]
  }

  /**
   * Aspiration findMany
   */
  export type AspirationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration
     */
    select?: AspirationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AspirationInclude<ExtArgs> | null
    /**
     * Filter, which Aspirations to fetch.
     */
    where?: AspirationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aspirations to fetch.
     */
    orderBy?: AspirationOrderByWithRelationInput | AspirationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Aspirations.
     */
    cursor?: AspirationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aspirations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aspirations.
     */
    skip?: number
    distinct?: AspirationScalarFieldEnum | AspirationScalarFieldEnum[]
  }

  /**
   * Aspiration create
   */
  export type AspirationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration
     */
    select?: AspirationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AspirationInclude<ExtArgs> | null
    /**
     * The data needed to create a Aspiration.
     */
    data: XOR<AspirationCreateInput, AspirationUncheckedCreateInput>
  }

  /**
   * Aspiration createMany
   */
  export type AspirationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Aspirations.
     */
    data: AspirationCreateManyInput | AspirationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Aspiration update
   */
  export type AspirationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration
     */
    select?: AspirationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AspirationInclude<ExtArgs> | null
    /**
     * The data needed to update a Aspiration.
     */
    data: XOR<AspirationUpdateInput, AspirationUncheckedUpdateInput>
    /**
     * Choose, which Aspiration to update.
     */
    where: AspirationWhereUniqueInput
  }

  /**
   * Aspiration updateMany
   */
  export type AspirationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Aspirations.
     */
    data: XOR<AspirationUpdateManyMutationInput, AspirationUncheckedUpdateManyInput>
    /**
     * Filter which Aspirations to update
     */
    where?: AspirationWhereInput
  }

  /**
   * Aspiration upsert
   */
  export type AspirationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration
     */
    select?: AspirationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AspirationInclude<ExtArgs> | null
    /**
     * The filter to search for the Aspiration to update in case it exists.
     */
    where: AspirationWhereUniqueInput
    /**
     * In case the Aspiration found by the `where` argument doesn't exist, create a new Aspiration with this data.
     */
    create: XOR<AspirationCreateInput, AspirationUncheckedCreateInput>
    /**
     * In case the Aspiration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AspirationUpdateInput, AspirationUncheckedUpdateInput>
  }

  /**
   * Aspiration delete
   */
  export type AspirationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration
     */
    select?: AspirationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AspirationInclude<ExtArgs> | null
    /**
     * Filter which Aspiration to delete.
     */
    where: AspirationWhereUniqueInput
  }

  /**
   * Aspiration deleteMany
   */
  export type AspirationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aspirations to delete
     */
    where?: AspirationWhereInput
  }

  /**
   * Aspiration without action
   */
  export type AspirationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aspiration
     */
    select?: AspirationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AspirationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    username: 'username',
    user_email: 'user_email',
    user_password: 'user_password',
    user_refresh_token: 'user_refresh_token',
    user_attempt: 'user_attempt',
    user_role: 'user_role',
    token_created_at: 'token_created_at',
    token_expired_at: 'token_expired_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CandidateScalarFieldEnum: {
    candidate_id: 'candidate_id',
    candidate_name: 'candidate_name',
    candidate_slug: 'candidate_slug',
    candidate_biography: 'candidate_biography',
    candidate_vision: 'candidate_vision',
    candidate_mission: 'candidate_mission'
  };

  export type CandidateScalarFieldEnum = (typeof CandidateScalarFieldEnum)[keyof typeof CandidateScalarFieldEnum]


  export const VoteScalarFieldEnum: {
    vote_id: 'vote_id',
    created_at: 'created_at',
    voter_id: 'voter_id',
    candidate_id: 'candidate_id'
  };

  export type VoteScalarFieldEnum = (typeof VoteScalarFieldEnum)[keyof typeof VoteScalarFieldEnum]


  export const Aspiration_AddressScalarFieldEnum: {
    aspiration_address_id: 'aspiration_address_id',
    aspiration_address: 'aspiration_address'
  };

  export type Aspiration_AddressScalarFieldEnum = (typeof Aspiration_AddressScalarFieldEnum)[keyof typeof Aspiration_AddressScalarFieldEnum]


  export const AspirationScalarFieldEnum: {
    aspiration_id: 'aspiration_id',
    aspiration_status: 'aspiration_status',
    aspiration: 'aspiration',
    user_id: 'user_id',
    aspiration_address_id: 'aspiration_address_id'
  };

  export type AspirationScalarFieldEnum = (typeof AspirationScalarFieldEnum)[keyof typeof AspirationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    user_email?: StringFilter<"User"> | string
    user_password?: StringFilter<"User"> | string
    user_refresh_token?: StringFilter<"User"> | string
    user_attempt?: IntFilter<"User"> | number
    user_role?: EnumRoleFilter<"User"> | $Enums.Role
    token_created_at?: IntNullableFilter<"User"> | number | null
    token_expired_at?: IntNullableFilter<"User"> | number | null
    votes?: VoteListRelationFilter
    aspirations?: AspirationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    user_id?: SortOrder
    username?: SortOrder
    user_email?: SortOrder
    user_password?: SortOrder
    user_refresh_token?: SortOrder
    user_attempt?: SortOrder
    user_role?: SortOrder
    token_created_at?: SortOrderInput | SortOrder
    token_expired_at?: SortOrderInput | SortOrder
    votes?: VoteOrderByRelationAggregateInput
    aspirations?: AspirationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    user_id?: string
    username?: string
    user_email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_password?: StringFilter<"User"> | string
    user_refresh_token?: StringFilter<"User"> | string
    user_attempt?: IntFilter<"User"> | number
    user_role?: EnumRoleFilter<"User"> | $Enums.Role
    token_created_at?: IntNullableFilter<"User"> | number | null
    token_expired_at?: IntNullableFilter<"User"> | number | null
    votes?: VoteListRelationFilter
    aspirations?: AspirationListRelationFilter
  }, "user_id" | "username" | "user_email">

  export type UserOrderByWithAggregationInput = {
    user_id?: SortOrder
    username?: SortOrder
    user_email?: SortOrder
    user_password?: SortOrder
    user_refresh_token?: SortOrder
    user_attempt?: SortOrder
    user_role?: SortOrder
    token_created_at?: SortOrderInput | SortOrder
    token_expired_at?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    user_id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    user_email?: StringWithAggregatesFilter<"User"> | string
    user_password?: StringWithAggregatesFilter<"User"> | string
    user_refresh_token?: StringWithAggregatesFilter<"User"> | string
    user_attempt?: IntWithAggregatesFilter<"User"> | number
    user_role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    token_created_at?: IntNullableWithAggregatesFilter<"User"> | number | null
    token_expired_at?: IntNullableWithAggregatesFilter<"User"> | number | null
  }

  export type CandidateWhereInput = {
    AND?: CandidateWhereInput | CandidateWhereInput[]
    OR?: CandidateWhereInput[]
    NOT?: CandidateWhereInput | CandidateWhereInput[]
    candidate_id?: StringFilter<"Candidate"> | string
    candidate_name?: StringFilter<"Candidate"> | string
    candidate_slug?: StringNullableFilter<"Candidate"> | string | null
    candidate_biography?: StringFilter<"Candidate"> | string
    candidate_vision?: StringFilter<"Candidate"> | string
    candidate_mission?: StringFilter<"Candidate"> | string
    votes?: VoteListRelationFilter
  }

  export type CandidateOrderByWithRelationInput = {
    candidate_id?: SortOrder
    candidate_name?: SortOrder
    candidate_slug?: SortOrderInput | SortOrder
    candidate_biography?: SortOrder
    candidate_vision?: SortOrder
    candidate_mission?: SortOrder
    votes?: VoteOrderByRelationAggregateInput
  }

  export type CandidateWhereUniqueInput = Prisma.AtLeast<{
    candidate_id?: string
    candidate_name?: string
    candidate_slug?: string
    AND?: CandidateWhereInput | CandidateWhereInput[]
    OR?: CandidateWhereInput[]
    NOT?: CandidateWhereInput | CandidateWhereInput[]
    candidate_biography?: StringFilter<"Candidate"> | string
    candidate_vision?: StringFilter<"Candidate"> | string
    candidate_mission?: StringFilter<"Candidate"> | string
    votes?: VoteListRelationFilter
  }, "candidate_id" | "candidate_name" | "candidate_slug">

  export type CandidateOrderByWithAggregationInput = {
    candidate_id?: SortOrder
    candidate_name?: SortOrder
    candidate_slug?: SortOrderInput | SortOrder
    candidate_biography?: SortOrder
    candidate_vision?: SortOrder
    candidate_mission?: SortOrder
    _count?: CandidateCountOrderByAggregateInput
    _max?: CandidateMaxOrderByAggregateInput
    _min?: CandidateMinOrderByAggregateInput
  }

  export type CandidateScalarWhereWithAggregatesInput = {
    AND?: CandidateScalarWhereWithAggregatesInput | CandidateScalarWhereWithAggregatesInput[]
    OR?: CandidateScalarWhereWithAggregatesInput[]
    NOT?: CandidateScalarWhereWithAggregatesInput | CandidateScalarWhereWithAggregatesInput[]
    candidate_id?: StringWithAggregatesFilter<"Candidate"> | string
    candidate_name?: StringWithAggregatesFilter<"Candidate"> | string
    candidate_slug?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    candidate_biography?: StringWithAggregatesFilter<"Candidate"> | string
    candidate_vision?: StringWithAggregatesFilter<"Candidate"> | string
    candidate_mission?: StringWithAggregatesFilter<"Candidate"> | string
  }

  export type VoteWhereInput = {
    AND?: VoteWhereInput | VoteWhereInput[]
    OR?: VoteWhereInput[]
    NOT?: VoteWhereInput | VoteWhereInput[]
    vote_id?: StringFilter<"Vote"> | string
    created_at?: DateTimeFilter<"Vote"> | Date | string
    voter_id?: StringFilter<"Vote"> | string
    candidate_id?: StringFilter<"Vote"> | string
    voter?: XOR<UserRelationFilter, UserWhereInput>
    candidate?: XOR<CandidateRelationFilter, CandidateWhereInput>
  }

  export type VoteOrderByWithRelationInput = {
    vote_id?: SortOrder
    created_at?: SortOrder
    voter_id?: SortOrder
    candidate_id?: SortOrder
    voter?: UserOrderByWithRelationInput
    candidate?: CandidateOrderByWithRelationInput
  }

  export type VoteWhereUniqueInput = Prisma.AtLeast<{
    vote_id?: string
    AND?: VoteWhereInput | VoteWhereInput[]
    OR?: VoteWhereInput[]
    NOT?: VoteWhereInput | VoteWhereInput[]
    created_at?: DateTimeFilter<"Vote"> | Date | string
    voter_id?: StringFilter<"Vote"> | string
    candidate_id?: StringFilter<"Vote"> | string
    voter?: XOR<UserRelationFilter, UserWhereInput>
    candidate?: XOR<CandidateRelationFilter, CandidateWhereInput>
  }, "vote_id">

  export type VoteOrderByWithAggregationInput = {
    vote_id?: SortOrder
    created_at?: SortOrder
    voter_id?: SortOrder
    candidate_id?: SortOrder
    _count?: VoteCountOrderByAggregateInput
    _max?: VoteMaxOrderByAggregateInput
    _min?: VoteMinOrderByAggregateInput
  }

  export type VoteScalarWhereWithAggregatesInput = {
    AND?: VoteScalarWhereWithAggregatesInput | VoteScalarWhereWithAggregatesInput[]
    OR?: VoteScalarWhereWithAggregatesInput[]
    NOT?: VoteScalarWhereWithAggregatesInput | VoteScalarWhereWithAggregatesInput[]
    vote_id?: StringWithAggregatesFilter<"Vote"> | string
    created_at?: DateTimeWithAggregatesFilter<"Vote"> | Date | string
    voter_id?: StringWithAggregatesFilter<"Vote"> | string
    candidate_id?: StringWithAggregatesFilter<"Vote"> | string
  }

  export type Aspiration_AddressWhereInput = {
    AND?: Aspiration_AddressWhereInput | Aspiration_AddressWhereInput[]
    OR?: Aspiration_AddressWhereInput[]
    NOT?: Aspiration_AddressWhereInput | Aspiration_AddressWhereInput[]
    aspiration_address_id?: StringFilter<"Aspiration_Address"> | string
    aspiration_address?: StringFilter<"Aspiration_Address"> | string
    aspirations?: AspirationListRelationFilter
  }

  export type Aspiration_AddressOrderByWithRelationInput = {
    aspiration_address_id?: SortOrder
    aspiration_address?: SortOrder
    aspirations?: AspirationOrderByRelationAggregateInput
  }

  export type Aspiration_AddressWhereUniqueInput = Prisma.AtLeast<{
    aspiration_address_id?: string
    aspiration_address?: string
    AND?: Aspiration_AddressWhereInput | Aspiration_AddressWhereInput[]
    OR?: Aspiration_AddressWhereInput[]
    NOT?: Aspiration_AddressWhereInput | Aspiration_AddressWhereInput[]
    aspirations?: AspirationListRelationFilter
  }, "aspiration_address_id" | "aspiration_address">

  export type Aspiration_AddressOrderByWithAggregationInput = {
    aspiration_address_id?: SortOrder
    aspiration_address?: SortOrder
    _count?: Aspiration_AddressCountOrderByAggregateInput
    _max?: Aspiration_AddressMaxOrderByAggregateInput
    _min?: Aspiration_AddressMinOrderByAggregateInput
  }

  export type Aspiration_AddressScalarWhereWithAggregatesInput = {
    AND?: Aspiration_AddressScalarWhereWithAggregatesInput | Aspiration_AddressScalarWhereWithAggregatesInput[]
    OR?: Aspiration_AddressScalarWhereWithAggregatesInput[]
    NOT?: Aspiration_AddressScalarWhereWithAggregatesInput | Aspiration_AddressScalarWhereWithAggregatesInput[]
    aspiration_address_id?: StringWithAggregatesFilter<"Aspiration_Address"> | string
    aspiration_address?: StringWithAggregatesFilter<"Aspiration_Address"> | string
  }

  export type AspirationWhereInput = {
    AND?: AspirationWhereInput | AspirationWhereInput[]
    OR?: AspirationWhereInput[]
    NOT?: AspirationWhereInput | AspirationWhereInput[]
    aspiration_id?: StringFilter<"Aspiration"> | string
    aspiration_status?: EnumStatusFilter<"Aspiration"> | $Enums.Status
    aspiration?: StringFilter<"Aspiration"> | string
    user_id?: StringFilter<"Aspiration"> | string
    aspiration_address_id?: StringFilter<"Aspiration"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    aspiration_address?: XOR<Aspiration_AddressRelationFilter, Aspiration_AddressWhereInput>
  }

  export type AspirationOrderByWithRelationInput = {
    aspiration_id?: SortOrder
    aspiration_status?: SortOrder
    aspiration?: SortOrder
    user_id?: SortOrder
    aspiration_address_id?: SortOrder
    user?: UserOrderByWithRelationInput
    aspiration_address?: Aspiration_AddressOrderByWithRelationInput
  }

  export type AspirationWhereUniqueInput = Prisma.AtLeast<{
    aspiration_id?: string
    AND?: AspirationWhereInput | AspirationWhereInput[]
    OR?: AspirationWhereInput[]
    NOT?: AspirationWhereInput | AspirationWhereInput[]
    aspiration_status?: EnumStatusFilter<"Aspiration"> | $Enums.Status
    aspiration?: StringFilter<"Aspiration"> | string
    user_id?: StringFilter<"Aspiration"> | string
    aspiration_address_id?: StringFilter<"Aspiration"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    aspiration_address?: XOR<Aspiration_AddressRelationFilter, Aspiration_AddressWhereInput>
  }, "aspiration_id">

  export type AspirationOrderByWithAggregationInput = {
    aspiration_id?: SortOrder
    aspiration_status?: SortOrder
    aspiration?: SortOrder
    user_id?: SortOrder
    aspiration_address_id?: SortOrder
    _count?: AspirationCountOrderByAggregateInput
    _max?: AspirationMaxOrderByAggregateInput
    _min?: AspirationMinOrderByAggregateInput
  }

  export type AspirationScalarWhereWithAggregatesInput = {
    AND?: AspirationScalarWhereWithAggregatesInput | AspirationScalarWhereWithAggregatesInput[]
    OR?: AspirationScalarWhereWithAggregatesInput[]
    NOT?: AspirationScalarWhereWithAggregatesInput | AspirationScalarWhereWithAggregatesInput[]
    aspiration_id?: StringWithAggregatesFilter<"Aspiration"> | string
    aspiration_status?: EnumStatusWithAggregatesFilter<"Aspiration"> | $Enums.Status
    aspiration?: StringWithAggregatesFilter<"Aspiration"> | string
    user_id?: StringWithAggregatesFilter<"Aspiration"> | string
    aspiration_address_id?: StringWithAggregatesFilter<"Aspiration"> | string
  }

  export type UserCreateInput = {
    user_id?: string
    username: string
    user_email: string
    user_password: string
    user_refresh_token: string
    user_attempt?: number
    user_role?: $Enums.Role
    token_created_at?: number | null
    token_expired_at?: number | null
    votes?: VoteCreateNestedManyWithoutVoterInput
    aspirations?: AspirationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    user_id?: string
    username: string
    user_email: string
    user_password: string
    user_refresh_token: string
    user_attempt?: number
    user_role?: $Enums.Role
    token_created_at?: number | null
    token_expired_at?: number | null
    votes?: VoteUncheckedCreateNestedManyWithoutVoterInput
    aspirations?: AspirationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_refresh_token?: StringFieldUpdateOperationsInput | string
    user_attempt?: IntFieldUpdateOperationsInput | number
    user_role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token_created_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_expired_at?: NullableIntFieldUpdateOperationsInput | number | null
    votes?: VoteUpdateManyWithoutVoterNestedInput
    aspirations?: AspirationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_refresh_token?: StringFieldUpdateOperationsInput | string
    user_attempt?: IntFieldUpdateOperationsInput | number
    user_role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token_created_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_expired_at?: NullableIntFieldUpdateOperationsInput | number | null
    votes?: VoteUncheckedUpdateManyWithoutVoterNestedInput
    aspirations?: AspirationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    user_id?: string
    username: string
    user_email: string
    user_password: string
    user_refresh_token: string
    user_attempt?: number
    user_role?: $Enums.Role
    token_created_at?: number | null
    token_expired_at?: number | null
  }

  export type UserUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_refresh_token?: StringFieldUpdateOperationsInput | string
    user_attempt?: IntFieldUpdateOperationsInput | number
    user_role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token_created_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_expired_at?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUncheckedUpdateManyInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_refresh_token?: StringFieldUpdateOperationsInput | string
    user_attempt?: IntFieldUpdateOperationsInput | number
    user_role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token_created_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_expired_at?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CandidateCreateInput = {
    candidate_id?: string
    candidate_name: string
    candidate_slug?: string | null
    candidate_biography: string
    candidate_vision: string
    candidate_mission: string
    votes?: VoteCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateInput = {
    candidate_id?: string
    candidate_name: string
    candidate_slug?: string | null
    candidate_biography: string
    candidate_vision: string
    candidate_mission: string
    votes?: VoteUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUpdateInput = {
    candidate_id?: StringFieldUpdateOperationsInput | string
    candidate_name?: StringFieldUpdateOperationsInput | string
    candidate_slug?: NullableStringFieldUpdateOperationsInput | string | null
    candidate_biography?: StringFieldUpdateOperationsInput | string
    candidate_vision?: StringFieldUpdateOperationsInput | string
    candidate_mission?: StringFieldUpdateOperationsInput | string
    votes?: VoteUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateInput = {
    candidate_id?: StringFieldUpdateOperationsInput | string
    candidate_name?: StringFieldUpdateOperationsInput | string
    candidate_slug?: NullableStringFieldUpdateOperationsInput | string | null
    candidate_biography?: StringFieldUpdateOperationsInput | string
    candidate_vision?: StringFieldUpdateOperationsInput | string
    candidate_mission?: StringFieldUpdateOperationsInput | string
    votes?: VoteUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateCreateManyInput = {
    candidate_id?: string
    candidate_name: string
    candidate_slug?: string | null
    candidate_biography: string
    candidate_vision: string
    candidate_mission: string
  }

  export type CandidateUpdateManyMutationInput = {
    candidate_id?: StringFieldUpdateOperationsInput | string
    candidate_name?: StringFieldUpdateOperationsInput | string
    candidate_slug?: NullableStringFieldUpdateOperationsInput | string | null
    candidate_biography?: StringFieldUpdateOperationsInput | string
    candidate_vision?: StringFieldUpdateOperationsInput | string
    candidate_mission?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateUncheckedUpdateManyInput = {
    candidate_id?: StringFieldUpdateOperationsInput | string
    candidate_name?: StringFieldUpdateOperationsInput | string
    candidate_slug?: NullableStringFieldUpdateOperationsInput | string | null
    candidate_biography?: StringFieldUpdateOperationsInput | string
    candidate_vision?: StringFieldUpdateOperationsInput | string
    candidate_mission?: StringFieldUpdateOperationsInput | string
  }

  export type VoteCreateInput = {
    vote_id?: string
    created_at?: Date | string
    voter: UserCreateNestedOneWithoutVotesInput
    candidate: CandidateCreateNestedOneWithoutVotesInput
  }

  export type VoteUncheckedCreateInput = {
    vote_id?: string
    created_at?: Date | string
    voter_id: string
    candidate_id: string
  }

  export type VoteUpdateInput = {
    vote_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    voter?: UserUpdateOneRequiredWithoutVotesNestedInput
    candidate?: CandidateUpdateOneRequiredWithoutVotesNestedInput
  }

  export type VoteUncheckedUpdateInput = {
    vote_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    voter_id?: StringFieldUpdateOperationsInput | string
    candidate_id?: StringFieldUpdateOperationsInput | string
  }

  export type VoteCreateManyInput = {
    vote_id?: string
    created_at?: Date | string
    voter_id: string
    candidate_id: string
  }

  export type VoteUpdateManyMutationInput = {
    vote_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateManyInput = {
    vote_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    voter_id?: StringFieldUpdateOperationsInput | string
    candidate_id?: StringFieldUpdateOperationsInput | string
  }

  export type Aspiration_AddressCreateInput = {
    aspiration_address_id?: string
    aspiration_address: string
    aspirations?: AspirationCreateNestedManyWithoutAspiration_addressInput
  }

  export type Aspiration_AddressUncheckedCreateInput = {
    aspiration_address_id?: string
    aspiration_address: string
    aspirations?: AspirationUncheckedCreateNestedManyWithoutAspiration_addressInput
  }

  export type Aspiration_AddressUpdateInput = {
    aspiration_address_id?: StringFieldUpdateOperationsInput | string
    aspiration_address?: StringFieldUpdateOperationsInput | string
    aspirations?: AspirationUpdateManyWithoutAspiration_addressNestedInput
  }

  export type Aspiration_AddressUncheckedUpdateInput = {
    aspiration_address_id?: StringFieldUpdateOperationsInput | string
    aspiration_address?: StringFieldUpdateOperationsInput | string
    aspirations?: AspirationUncheckedUpdateManyWithoutAspiration_addressNestedInput
  }

  export type Aspiration_AddressCreateManyInput = {
    aspiration_address_id?: string
    aspiration_address: string
  }

  export type Aspiration_AddressUpdateManyMutationInput = {
    aspiration_address_id?: StringFieldUpdateOperationsInput | string
    aspiration_address?: StringFieldUpdateOperationsInput | string
  }

  export type Aspiration_AddressUncheckedUpdateManyInput = {
    aspiration_address_id?: StringFieldUpdateOperationsInput | string
    aspiration_address?: StringFieldUpdateOperationsInput | string
  }

  export type AspirationCreateInput = {
    aspiration_id?: string
    aspiration_status?: $Enums.Status
    aspiration: string
    user: UserCreateNestedOneWithoutAspirationsInput
    aspiration_address: Aspiration_AddressCreateNestedOneWithoutAspirationsInput
  }

  export type AspirationUncheckedCreateInput = {
    aspiration_id?: string
    aspiration_status?: $Enums.Status
    aspiration: string
    user_id: string
    aspiration_address_id: string
  }

  export type AspirationUpdateInput = {
    aspiration_id?: StringFieldUpdateOperationsInput | string
    aspiration_status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    aspiration?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutAspirationsNestedInput
    aspiration_address?: Aspiration_AddressUpdateOneRequiredWithoutAspirationsNestedInput
  }

  export type AspirationUncheckedUpdateInput = {
    aspiration_id?: StringFieldUpdateOperationsInput | string
    aspiration_status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    aspiration?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    aspiration_address_id?: StringFieldUpdateOperationsInput | string
  }

  export type AspirationCreateManyInput = {
    aspiration_id?: string
    aspiration_status?: $Enums.Status
    aspiration: string
    user_id: string
    aspiration_address_id: string
  }

  export type AspirationUpdateManyMutationInput = {
    aspiration_id?: StringFieldUpdateOperationsInput | string
    aspiration_status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    aspiration?: StringFieldUpdateOperationsInput | string
  }

  export type AspirationUncheckedUpdateManyInput = {
    aspiration_id?: StringFieldUpdateOperationsInput | string
    aspiration_status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    aspiration?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    aspiration_address_id?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type VoteListRelationFilter = {
    every?: VoteWhereInput
    some?: VoteWhereInput
    none?: VoteWhereInput
  }

  export type AspirationListRelationFilter = {
    every?: AspirationWhereInput
    some?: AspirationWhereInput
    none?: AspirationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type VoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AspirationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    user_email?: SortOrder
    user_password?: SortOrder
    user_refresh_token?: SortOrder
    user_attempt?: SortOrder
    user_role?: SortOrder
    token_created_at?: SortOrder
    token_expired_at?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    user_attempt?: SortOrder
    token_created_at?: SortOrder
    token_expired_at?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    user_email?: SortOrder
    user_password?: SortOrder
    user_refresh_token?: SortOrder
    user_attempt?: SortOrder
    user_role?: SortOrder
    token_created_at?: SortOrder
    token_expired_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    user_email?: SortOrder
    user_password?: SortOrder
    user_refresh_token?: SortOrder
    user_attempt?: SortOrder
    user_role?: SortOrder
    token_created_at?: SortOrder
    token_expired_at?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    user_attempt?: SortOrder
    token_created_at?: SortOrder
    token_expired_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CandidateCountOrderByAggregateInput = {
    candidate_id?: SortOrder
    candidate_name?: SortOrder
    candidate_slug?: SortOrder
    candidate_biography?: SortOrder
    candidate_vision?: SortOrder
    candidate_mission?: SortOrder
  }

  export type CandidateMaxOrderByAggregateInput = {
    candidate_id?: SortOrder
    candidate_name?: SortOrder
    candidate_slug?: SortOrder
    candidate_biography?: SortOrder
    candidate_vision?: SortOrder
    candidate_mission?: SortOrder
  }

  export type CandidateMinOrderByAggregateInput = {
    candidate_id?: SortOrder
    candidate_name?: SortOrder
    candidate_slug?: SortOrder
    candidate_biography?: SortOrder
    candidate_vision?: SortOrder
    candidate_mission?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CandidateRelationFilter = {
    is?: CandidateWhereInput
    isNot?: CandidateWhereInput
  }

  export type VoteCountOrderByAggregateInput = {
    vote_id?: SortOrder
    created_at?: SortOrder
    voter_id?: SortOrder
    candidate_id?: SortOrder
  }

  export type VoteMaxOrderByAggregateInput = {
    vote_id?: SortOrder
    created_at?: SortOrder
    voter_id?: SortOrder
    candidate_id?: SortOrder
  }

  export type VoteMinOrderByAggregateInput = {
    vote_id?: SortOrder
    created_at?: SortOrder
    voter_id?: SortOrder
    candidate_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type Aspiration_AddressCountOrderByAggregateInput = {
    aspiration_address_id?: SortOrder
    aspiration_address?: SortOrder
  }

  export type Aspiration_AddressMaxOrderByAggregateInput = {
    aspiration_address_id?: SortOrder
    aspiration_address?: SortOrder
  }

  export type Aspiration_AddressMinOrderByAggregateInput = {
    aspiration_address_id?: SortOrder
    aspiration_address?: SortOrder
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type Aspiration_AddressRelationFilter = {
    is?: Aspiration_AddressWhereInput
    isNot?: Aspiration_AddressWhereInput
  }

  export type AspirationCountOrderByAggregateInput = {
    aspiration_id?: SortOrder
    aspiration_status?: SortOrder
    aspiration?: SortOrder
    user_id?: SortOrder
    aspiration_address_id?: SortOrder
  }

  export type AspirationMaxOrderByAggregateInput = {
    aspiration_id?: SortOrder
    aspiration_status?: SortOrder
    aspiration?: SortOrder
    user_id?: SortOrder
    aspiration_address_id?: SortOrder
  }

  export type AspirationMinOrderByAggregateInput = {
    aspiration_id?: SortOrder
    aspiration_status?: SortOrder
    aspiration?: SortOrder
    user_id?: SortOrder
    aspiration_address_id?: SortOrder
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type VoteCreateNestedManyWithoutVoterInput = {
    create?: XOR<VoteCreateWithoutVoterInput, VoteUncheckedCreateWithoutVoterInput> | VoteCreateWithoutVoterInput[] | VoteUncheckedCreateWithoutVoterInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutVoterInput | VoteCreateOrConnectWithoutVoterInput[]
    createMany?: VoteCreateManyVoterInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type AspirationCreateNestedManyWithoutUserInput = {
    create?: XOR<AspirationCreateWithoutUserInput, AspirationUncheckedCreateWithoutUserInput> | AspirationCreateWithoutUserInput[] | AspirationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AspirationCreateOrConnectWithoutUserInput | AspirationCreateOrConnectWithoutUserInput[]
    createMany?: AspirationCreateManyUserInputEnvelope
    connect?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
  }

  export type VoteUncheckedCreateNestedManyWithoutVoterInput = {
    create?: XOR<VoteCreateWithoutVoterInput, VoteUncheckedCreateWithoutVoterInput> | VoteCreateWithoutVoterInput[] | VoteUncheckedCreateWithoutVoterInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutVoterInput | VoteCreateOrConnectWithoutVoterInput[]
    createMany?: VoteCreateManyVoterInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type AspirationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AspirationCreateWithoutUserInput, AspirationUncheckedCreateWithoutUserInput> | AspirationCreateWithoutUserInput[] | AspirationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AspirationCreateOrConnectWithoutUserInput | AspirationCreateOrConnectWithoutUserInput[]
    createMany?: AspirationCreateManyUserInputEnvelope
    connect?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type VoteUpdateManyWithoutVoterNestedInput = {
    create?: XOR<VoteCreateWithoutVoterInput, VoteUncheckedCreateWithoutVoterInput> | VoteCreateWithoutVoterInput[] | VoteUncheckedCreateWithoutVoterInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutVoterInput | VoteCreateOrConnectWithoutVoterInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutVoterInput | VoteUpsertWithWhereUniqueWithoutVoterInput[]
    createMany?: VoteCreateManyVoterInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutVoterInput | VoteUpdateWithWhereUniqueWithoutVoterInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutVoterInput | VoteUpdateManyWithWhereWithoutVoterInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type AspirationUpdateManyWithoutUserNestedInput = {
    create?: XOR<AspirationCreateWithoutUserInput, AspirationUncheckedCreateWithoutUserInput> | AspirationCreateWithoutUserInput[] | AspirationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AspirationCreateOrConnectWithoutUserInput | AspirationCreateOrConnectWithoutUserInput[]
    upsert?: AspirationUpsertWithWhereUniqueWithoutUserInput | AspirationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AspirationCreateManyUserInputEnvelope
    set?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
    disconnect?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
    delete?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
    connect?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
    update?: AspirationUpdateWithWhereUniqueWithoutUserInput | AspirationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AspirationUpdateManyWithWhereWithoutUserInput | AspirationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AspirationScalarWhereInput | AspirationScalarWhereInput[]
  }

  export type VoteUncheckedUpdateManyWithoutVoterNestedInput = {
    create?: XOR<VoteCreateWithoutVoterInput, VoteUncheckedCreateWithoutVoterInput> | VoteCreateWithoutVoterInput[] | VoteUncheckedCreateWithoutVoterInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutVoterInput | VoteCreateOrConnectWithoutVoterInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutVoterInput | VoteUpsertWithWhereUniqueWithoutVoterInput[]
    createMany?: VoteCreateManyVoterInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutVoterInput | VoteUpdateWithWhereUniqueWithoutVoterInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutVoterInput | VoteUpdateManyWithWhereWithoutVoterInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type AspirationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AspirationCreateWithoutUserInput, AspirationUncheckedCreateWithoutUserInput> | AspirationCreateWithoutUserInput[] | AspirationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AspirationCreateOrConnectWithoutUserInput | AspirationCreateOrConnectWithoutUserInput[]
    upsert?: AspirationUpsertWithWhereUniqueWithoutUserInput | AspirationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AspirationCreateManyUserInputEnvelope
    set?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
    disconnect?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
    delete?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
    connect?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
    update?: AspirationUpdateWithWhereUniqueWithoutUserInput | AspirationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AspirationUpdateManyWithWhereWithoutUserInput | AspirationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AspirationScalarWhereInput | AspirationScalarWhereInput[]
  }

  export type VoteCreateNestedManyWithoutCandidateInput = {
    create?: XOR<VoteCreateWithoutCandidateInput, VoteUncheckedCreateWithoutCandidateInput> | VoteCreateWithoutCandidateInput[] | VoteUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutCandidateInput | VoteCreateOrConnectWithoutCandidateInput[]
    createMany?: VoteCreateManyCandidateInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type VoteUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<VoteCreateWithoutCandidateInput, VoteUncheckedCreateWithoutCandidateInput> | VoteCreateWithoutCandidateInput[] | VoteUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutCandidateInput | VoteCreateOrConnectWithoutCandidateInput[]
    createMany?: VoteCreateManyCandidateInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type VoteUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<VoteCreateWithoutCandidateInput, VoteUncheckedCreateWithoutCandidateInput> | VoteCreateWithoutCandidateInput[] | VoteUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutCandidateInput | VoteCreateOrConnectWithoutCandidateInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutCandidateInput | VoteUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: VoteCreateManyCandidateInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutCandidateInput | VoteUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutCandidateInput | VoteUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type VoteUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<VoteCreateWithoutCandidateInput, VoteUncheckedCreateWithoutCandidateInput> | VoteCreateWithoutCandidateInput[] | VoteUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutCandidateInput | VoteCreateOrConnectWithoutCandidateInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutCandidateInput | VoteUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: VoteCreateManyCandidateInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutCandidateInput | VoteUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutCandidateInput | VoteUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutVotesInput = {
    create?: XOR<UserCreateWithoutVotesInput, UserUncheckedCreateWithoutVotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutVotesInput
    connect?: UserWhereUniqueInput
  }

  export type CandidateCreateNestedOneWithoutVotesInput = {
    create?: XOR<CandidateCreateWithoutVotesInput, CandidateUncheckedCreateWithoutVotesInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutVotesInput
    connect?: CandidateWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutVotesNestedInput = {
    create?: XOR<UserCreateWithoutVotesInput, UserUncheckedCreateWithoutVotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutVotesInput
    upsert?: UserUpsertWithoutVotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVotesInput, UserUpdateWithoutVotesInput>, UserUncheckedUpdateWithoutVotesInput>
  }

  export type CandidateUpdateOneRequiredWithoutVotesNestedInput = {
    create?: XOR<CandidateCreateWithoutVotesInput, CandidateUncheckedCreateWithoutVotesInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutVotesInput
    upsert?: CandidateUpsertWithoutVotesInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutVotesInput, CandidateUpdateWithoutVotesInput>, CandidateUncheckedUpdateWithoutVotesInput>
  }

  export type AspirationCreateNestedManyWithoutAspiration_addressInput = {
    create?: XOR<AspirationCreateWithoutAspiration_addressInput, AspirationUncheckedCreateWithoutAspiration_addressInput> | AspirationCreateWithoutAspiration_addressInput[] | AspirationUncheckedCreateWithoutAspiration_addressInput[]
    connectOrCreate?: AspirationCreateOrConnectWithoutAspiration_addressInput | AspirationCreateOrConnectWithoutAspiration_addressInput[]
    createMany?: AspirationCreateManyAspiration_addressInputEnvelope
    connect?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
  }

  export type AspirationUncheckedCreateNestedManyWithoutAspiration_addressInput = {
    create?: XOR<AspirationCreateWithoutAspiration_addressInput, AspirationUncheckedCreateWithoutAspiration_addressInput> | AspirationCreateWithoutAspiration_addressInput[] | AspirationUncheckedCreateWithoutAspiration_addressInput[]
    connectOrCreate?: AspirationCreateOrConnectWithoutAspiration_addressInput | AspirationCreateOrConnectWithoutAspiration_addressInput[]
    createMany?: AspirationCreateManyAspiration_addressInputEnvelope
    connect?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
  }

  export type AspirationUpdateManyWithoutAspiration_addressNestedInput = {
    create?: XOR<AspirationCreateWithoutAspiration_addressInput, AspirationUncheckedCreateWithoutAspiration_addressInput> | AspirationCreateWithoutAspiration_addressInput[] | AspirationUncheckedCreateWithoutAspiration_addressInput[]
    connectOrCreate?: AspirationCreateOrConnectWithoutAspiration_addressInput | AspirationCreateOrConnectWithoutAspiration_addressInput[]
    upsert?: AspirationUpsertWithWhereUniqueWithoutAspiration_addressInput | AspirationUpsertWithWhereUniqueWithoutAspiration_addressInput[]
    createMany?: AspirationCreateManyAspiration_addressInputEnvelope
    set?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
    disconnect?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
    delete?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
    connect?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
    update?: AspirationUpdateWithWhereUniqueWithoutAspiration_addressInput | AspirationUpdateWithWhereUniqueWithoutAspiration_addressInput[]
    updateMany?: AspirationUpdateManyWithWhereWithoutAspiration_addressInput | AspirationUpdateManyWithWhereWithoutAspiration_addressInput[]
    deleteMany?: AspirationScalarWhereInput | AspirationScalarWhereInput[]
  }

  export type AspirationUncheckedUpdateManyWithoutAspiration_addressNestedInput = {
    create?: XOR<AspirationCreateWithoutAspiration_addressInput, AspirationUncheckedCreateWithoutAspiration_addressInput> | AspirationCreateWithoutAspiration_addressInput[] | AspirationUncheckedCreateWithoutAspiration_addressInput[]
    connectOrCreate?: AspirationCreateOrConnectWithoutAspiration_addressInput | AspirationCreateOrConnectWithoutAspiration_addressInput[]
    upsert?: AspirationUpsertWithWhereUniqueWithoutAspiration_addressInput | AspirationUpsertWithWhereUniqueWithoutAspiration_addressInput[]
    createMany?: AspirationCreateManyAspiration_addressInputEnvelope
    set?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
    disconnect?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
    delete?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
    connect?: AspirationWhereUniqueInput | AspirationWhereUniqueInput[]
    update?: AspirationUpdateWithWhereUniqueWithoutAspiration_addressInput | AspirationUpdateWithWhereUniqueWithoutAspiration_addressInput[]
    updateMany?: AspirationUpdateManyWithWhereWithoutAspiration_addressInput | AspirationUpdateManyWithWhereWithoutAspiration_addressInput[]
    deleteMany?: AspirationScalarWhereInput | AspirationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAspirationsInput = {
    create?: XOR<UserCreateWithoutAspirationsInput, UserUncheckedCreateWithoutAspirationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAspirationsInput
    connect?: UserWhereUniqueInput
  }

  export type Aspiration_AddressCreateNestedOneWithoutAspirationsInput = {
    create?: XOR<Aspiration_AddressCreateWithoutAspirationsInput, Aspiration_AddressUncheckedCreateWithoutAspirationsInput>
    connectOrCreate?: Aspiration_AddressCreateOrConnectWithoutAspirationsInput
    connect?: Aspiration_AddressWhereUniqueInput
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type UserUpdateOneRequiredWithoutAspirationsNestedInput = {
    create?: XOR<UserCreateWithoutAspirationsInput, UserUncheckedCreateWithoutAspirationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAspirationsInput
    upsert?: UserUpsertWithoutAspirationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAspirationsInput, UserUpdateWithoutAspirationsInput>, UserUncheckedUpdateWithoutAspirationsInput>
  }

  export type Aspiration_AddressUpdateOneRequiredWithoutAspirationsNestedInput = {
    create?: XOR<Aspiration_AddressCreateWithoutAspirationsInput, Aspiration_AddressUncheckedCreateWithoutAspirationsInput>
    connectOrCreate?: Aspiration_AddressCreateOrConnectWithoutAspirationsInput
    upsert?: Aspiration_AddressUpsertWithoutAspirationsInput
    connect?: Aspiration_AddressWhereUniqueInput
    update?: XOR<XOR<Aspiration_AddressUpdateToOneWithWhereWithoutAspirationsInput, Aspiration_AddressUpdateWithoutAspirationsInput>, Aspiration_AddressUncheckedUpdateWithoutAspirationsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type VoteCreateWithoutVoterInput = {
    vote_id?: string
    created_at?: Date | string
    candidate: CandidateCreateNestedOneWithoutVotesInput
  }

  export type VoteUncheckedCreateWithoutVoterInput = {
    vote_id?: string
    created_at?: Date | string
    candidate_id: string
  }

  export type VoteCreateOrConnectWithoutVoterInput = {
    where: VoteWhereUniqueInput
    create: XOR<VoteCreateWithoutVoterInput, VoteUncheckedCreateWithoutVoterInput>
  }

  export type VoteCreateManyVoterInputEnvelope = {
    data: VoteCreateManyVoterInput | VoteCreateManyVoterInput[]
    skipDuplicates?: boolean
  }

  export type AspirationCreateWithoutUserInput = {
    aspiration_id?: string
    aspiration_status?: $Enums.Status
    aspiration: string
    aspiration_address: Aspiration_AddressCreateNestedOneWithoutAspirationsInput
  }

  export type AspirationUncheckedCreateWithoutUserInput = {
    aspiration_id?: string
    aspiration_status?: $Enums.Status
    aspiration: string
    aspiration_address_id: string
  }

  export type AspirationCreateOrConnectWithoutUserInput = {
    where: AspirationWhereUniqueInput
    create: XOR<AspirationCreateWithoutUserInput, AspirationUncheckedCreateWithoutUserInput>
  }

  export type AspirationCreateManyUserInputEnvelope = {
    data: AspirationCreateManyUserInput | AspirationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VoteUpsertWithWhereUniqueWithoutVoterInput = {
    where: VoteWhereUniqueInput
    update: XOR<VoteUpdateWithoutVoterInput, VoteUncheckedUpdateWithoutVoterInput>
    create: XOR<VoteCreateWithoutVoterInput, VoteUncheckedCreateWithoutVoterInput>
  }

  export type VoteUpdateWithWhereUniqueWithoutVoterInput = {
    where: VoteWhereUniqueInput
    data: XOR<VoteUpdateWithoutVoterInput, VoteUncheckedUpdateWithoutVoterInput>
  }

  export type VoteUpdateManyWithWhereWithoutVoterInput = {
    where: VoteScalarWhereInput
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyWithoutVoterInput>
  }

  export type VoteScalarWhereInput = {
    AND?: VoteScalarWhereInput | VoteScalarWhereInput[]
    OR?: VoteScalarWhereInput[]
    NOT?: VoteScalarWhereInput | VoteScalarWhereInput[]
    vote_id?: StringFilter<"Vote"> | string
    created_at?: DateTimeFilter<"Vote"> | Date | string
    voter_id?: StringFilter<"Vote"> | string
    candidate_id?: StringFilter<"Vote"> | string
  }

  export type AspirationUpsertWithWhereUniqueWithoutUserInput = {
    where: AspirationWhereUniqueInput
    update: XOR<AspirationUpdateWithoutUserInput, AspirationUncheckedUpdateWithoutUserInput>
    create: XOR<AspirationCreateWithoutUserInput, AspirationUncheckedCreateWithoutUserInput>
  }

  export type AspirationUpdateWithWhereUniqueWithoutUserInput = {
    where: AspirationWhereUniqueInput
    data: XOR<AspirationUpdateWithoutUserInput, AspirationUncheckedUpdateWithoutUserInput>
  }

  export type AspirationUpdateManyWithWhereWithoutUserInput = {
    where: AspirationScalarWhereInput
    data: XOR<AspirationUpdateManyMutationInput, AspirationUncheckedUpdateManyWithoutUserInput>
  }

  export type AspirationScalarWhereInput = {
    AND?: AspirationScalarWhereInput | AspirationScalarWhereInput[]
    OR?: AspirationScalarWhereInput[]
    NOT?: AspirationScalarWhereInput | AspirationScalarWhereInput[]
    aspiration_id?: StringFilter<"Aspiration"> | string
    aspiration_status?: EnumStatusFilter<"Aspiration"> | $Enums.Status
    aspiration?: StringFilter<"Aspiration"> | string
    user_id?: StringFilter<"Aspiration"> | string
    aspiration_address_id?: StringFilter<"Aspiration"> | string
  }

  export type VoteCreateWithoutCandidateInput = {
    vote_id?: string
    created_at?: Date | string
    voter: UserCreateNestedOneWithoutVotesInput
  }

  export type VoteUncheckedCreateWithoutCandidateInput = {
    vote_id?: string
    created_at?: Date | string
    voter_id: string
  }

  export type VoteCreateOrConnectWithoutCandidateInput = {
    where: VoteWhereUniqueInput
    create: XOR<VoteCreateWithoutCandidateInput, VoteUncheckedCreateWithoutCandidateInput>
  }

  export type VoteCreateManyCandidateInputEnvelope = {
    data: VoteCreateManyCandidateInput | VoteCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type VoteUpsertWithWhereUniqueWithoutCandidateInput = {
    where: VoteWhereUniqueInput
    update: XOR<VoteUpdateWithoutCandidateInput, VoteUncheckedUpdateWithoutCandidateInput>
    create: XOR<VoteCreateWithoutCandidateInput, VoteUncheckedCreateWithoutCandidateInput>
  }

  export type VoteUpdateWithWhereUniqueWithoutCandidateInput = {
    where: VoteWhereUniqueInput
    data: XOR<VoteUpdateWithoutCandidateInput, VoteUncheckedUpdateWithoutCandidateInput>
  }

  export type VoteUpdateManyWithWhereWithoutCandidateInput = {
    where: VoteScalarWhereInput
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyWithoutCandidateInput>
  }

  export type UserCreateWithoutVotesInput = {
    user_id?: string
    username: string
    user_email: string
    user_password: string
    user_refresh_token: string
    user_attempt?: number
    user_role?: $Enums.Role
    token_created_at?: number | null
    token_expired_at?: number | null
    aspirations?: AspirationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVotesInput = {
    user_id?: string
    username: string
    user_email: string
    user_password: string
    user_refresh_token: string
    user_attempt?: number
    user_role?: $Enums.Role
    token_created_at?: number | null
    token_expired_at?: number | null
    aspirations?: AspirationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVotesInput, UserUncheckedCreateWithoutVotesInput>
  }

  export type CandidateCreateWithoutVotesInput = {
    candidate_id?: string
    candidate_name: string
    candidate_slug?: string | null
    candidate_biography: string
    candidate_vision: string
    candidate_mission: string
  }

  export type CandidateUncheckedCreateWithoutVotesInput = {
    candidate_id?: string
    candidate_name: string
    candidate_slug?: string | null
    candidate_biography: string
    candidate_vision: string
    candidate_mission: string
  }

  export type CandidateCreateOrConnectWithoutVotesInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutVotesInput, CandidateUncheckedCreateWithoutVotesInput>
  }

  export type UserUpsertWithoutVotesInput = {
    update: XOR<UserUpdateWithoutVotesInput, UserUncheckedUpdateWithoutVotesInput>
    create: XOR<UserCreateWithoutVotesInput, UserUncheckedCreateWithoutVotesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVotesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVotesInput, UserUncheckedUpdateWithoutVotesInput>
  }

  export type UserUpdateWithoutVotesInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_refresh_token?: StringFieldUpdateOperationsInput | string
    user_attempt?: IntFieldUpdateOperationsInput | number
    user_role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token_created_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_expired_at?: NullableIntFieldUpdateOperationsInput | number | null
    aspirations?: AspirationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVotesInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_refresh_token?: StringFieldUpdateOperationsInput | string
    user_attempt?: IntFieldUpdateOperationsInput | number
    user_role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token_created_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_expired_at?: NullableIntFieldUpdateOperationsInput | number | null
    aspirations?: AspirationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CandidateUpsertWithoutVotesInput = {
    update: XOR<CandidateUpdateWithoutVotesInput, CandidateUncheckedUpdateWithoutVotesInput>
    create: XOR<CandidateCreateWithoutVotesInput, CandidateUncheckedCreateWithoutVotesInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutVotesInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutVotesInput, CandidateUncheckedUpdateWithoutVotesInput>
  }

  export type CandidateUpdateWithoutVotesInput = {
    candidate_id?: StringFieldUpdateOperationsInput | string
    candidate_name?: StringFieldUpdateOperationsInput | string
    candidate_slug?: NullableStringFieldUpdateOperationsInput | string | null
    candidate_biography?: StringFieldUpdateOperationsInput | string
    candidate_vision?: StringFieldUpdateOperationsInput | string
    candidate_mission?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateUncheckedUpdateWithoutVotesInput = {
    candidate_id?: StringFieldUpdateOperationsInput | string
    candidate_name?: StringFieldUpdateOperationsInput | string
    candidate_slug?: NullableStringFieldUpdateOperationsInput | string | null
    candidate_biography?: StringFieldUpdateOperationsInput | string
    candidate_vision?: StringFieldUpdateOperationsInput | string
    candidate_mission?: StringFieldUpdateOperationsInput | string
  }

  export type AspirationCreateWithoutAspiration_addressInput = {
    aspiration_id?: string
    aspiration_status?: $Enums.Status
    aspiration: string
    user: UserCreateNestedOneWithoutAspirationsInput
  }

  export type AspirationUncheckedCreateWithoutAspiration_addressInput = {
    aspiration_id?: string
    aspiration_status?: $Enums.Status
    aspiration: string
    user_id: string
  }

  export type AspirationCreateOrConnectWithoutAspiration_addressInput = {
    where: AspirationWhereUniqueInput
    create: XOR<AspirationCreateWithoutAspiration_addressInput, AspirationUncheckedCreateWithoutAspiration_addressInput>
  }

  export type AspirationCreateManyAspiration_addressInputEnvelope = {
    data: AspirationCreateManyAspiration_addressInput | AspirationCreateManyAspiration_addressInput[]
    skipDuplicates?: boolean
  }

  export type AspirationUpsertWithWhereUniqueWithoutAspiration_addressInput = {
    where: AspirationWhereUniqueInput
    update: XOR<AspirationUpdateWithoutAspiration_addressInput, AspirationUncheckedUpdateWithoutAspiration_addressInput>
    create: XOR<AspirationCreateWithoutAspiration_addressInput, AspirationUncheckedCreateWithoutAspiration_addressInput>
  }

  export type AspirationUpdateWithWhereUniqueWithoutAspiration_addressInput = {
    where: AspirationWhereUniqueInput
    data: XOR<AspirationUpdateWithoutAspiration_addressInput, AspirationUncheckedUpdateWithoutAspiration_addressInput>
  }

  export type AspirationUpdateManyWithWhereWithoutAspiration_addressInput = {
    where: AspirationScalarWhereInput
    data: XOR<AspirationUpdateManyMutationInput, AspirationUncheckedUpdateManyWithoutAspiration_addressInput>
  }

  export type UserCreateWithoutAspirationsInput = {
    user_id?: string
    username: string
    user_email: string
    user_password: string
    user_refresh_token: string
    user_attempt?: number
    user_role?: $Enums.Role
    token_created_at?: number | null
    token_expired_at?: number | null
    votes?: VoteCreateNestedManyWithoutVoterInput
  }

  export type UserUncheckedCreateWithoutAspirationsInput = {
    user_id?: string
    username: string
    user_email: string
    user_password: string
    user_refresh_token: string
    user_attempt?: number
    user_role?: $Enums.Role
    token_created_at?: number | null
    token_expired_at?: number | null
    votes?: VoteUncheckedCreateNestedManyWithoutVoterInput
  }

  export type UserCreateOrConnectWithoutAspirationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAspirationsInput, UserUncheckedCreateWithoutAspirationsInput>
  }

  export type Aspiration_AddressCreateWithoutAspirationsInput = {
    aspiration_address_id?: string
    aspiration_address: string
  }

  export type Aspiration_AddressUncheckedCreateWithoutAspirationsInput = {
    aspiration_address_id?: string
    aspiration_address: string
  }

  export type Aspiration_AddressCreateOrConnectWithoutAspirationsInput = {
    where: Aspiration_AddressWhereUniqueInput
    create: XOR<Aspiration_AddressCreateWithoutAspirationsInput, Aspiration_AddressUncheckedCreateWithoutAspirationsInput>
  }

  export type UserUpsertWithoutAspirationsInput = {
    update: XOR<UserUpdateWithoutAspirationsInput, UserUncheckedUpdateWithoutAspirationsInput>
    create: XOR<UserCreateWithoutAspirationsInput, UserUncheckedCreateWithoutAspirationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAspirationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAspirationsInput, UserUncheckedUpdateWithoutAspirationsInput>
  }

  export type UserUpdateWithoutAspirationsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_refresh_token?: StringFieldUpdateOperationsInput | string
    user_attempt?: IntFieldUpdateOperationsInput | number
    user_role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token_created_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_expired_at?: NullableIntFieldUpdateOperationsInput | number | null
    votes?: VoteUpdateManyWithoutVoterNestedInput
  }

  export type UserUncheckedUpdateWithoutAspirationsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_refresh_token?: StringFieldUpdateOperationsInput | string
    user_attempt?: IntFieldUpdateOperationsInput | number
    user_role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token_created_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_expired_at?: NullableIntFieldUpdateOperationsInput | number | null
    votes?: VoteUncheckedUpdateManyWithoutVoterNestedInput
  }

  export type Aspiration_AddressUpsertWithoutAspirationsInput = {
    update: XOR<Aspiration_AddressUpdateWithoutAspirationsInput, Aspiration_AddressUncheckedUpdateWithoutAspirationsInput>
    create: XOR<Aspiration_AddressCreateWithoutAspirationsInput, Aspiration_AddressUncheckedCreateWithoutAspirationsInput>
    where?: Aspiration_AddressWhereInput
  }

  export type Aspiration_AddressUpdateToOneWithWhereWithoutAspirationsInput = {
    where?: Aspiration_AddressWhereInput
    data: XOR<Aspiration_AddressUpdateWithoutAspirationsInput, Aspiration_AddressUncheckedUpdateWithoutAspirationsInput>
  }

  export type Aspiration_AddressUpdateWithoutAspirationsInput = {
    aspiration_address_id?: StringFieldUpdateOperationsInput | string
    aspiration_address?: StringFieldUpdateOperationsInput | string
  }

  export type Aspiration_AddressUncheckedUpdateWithoutAspirationsInput = {
    aspiration_address_id?: StringFieldUpdateOperationsInput | string
    aspiration_address?: StringFieldUpdateOperationsInput | string
  }

  export type VoteCreateManyVoterInput = {
    vote_id?: string
    created_at?: Date | string
    candidate_id: string
  }

  export type AspirationCreateManyUserInput = {
    aspiration_id?: string
    aspiration_status?: $Enums.Status
    aspiration: string
    aspiration_address_id: string
  }

  export type VoteUpdateWithoutVoterInput = {
    vote_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidateUpdateOneRequiredWithoutVotesNestedInput
  }

  export type VoteUncheckedUpdateWithoutVoterInput = {
    vote_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate_id?: StringFieldUpdateOperationsInput | string
  }

  export type VoteUncheckedUpdateManyWithoutVoterInput = {
    vote_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate_id?: StringFieldUpdateOperationsInput | string
  }

  export type AspirationUpdateWithoutUserInput = {
    aspiration_id?: StringFieldUpdateOperationsInput | string
    aspiration_status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    aspiration?: StringFieldUpdateOperationsInput | string
    aspiration_address?: Aspiration_AddressUpdateOneRequiredWithoutAspirationsNestedInput
  }

  export type AspirationUncheckedUpdateWithoutUserInput = {
    aspiration_id?: StringFieldUpdateOperationsInput | string
    aspiration_status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    aspiration?: StringFieldUpdateOperationsInput | string
    aspiration_address_id?: StringFieldUpdateOperationsInput | string
  }

  export type AspirationUncheckedUpdateManyWithoutUserInput = {
    aspiration_id?: StringFieldUpdateOperationsInput | string
    aspiration_status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    aspiration?: StringFieldUpdateOperationsInput | string
    aspiration_address_id?: StringFieldUpdateOperationsInput | string
  }

  export type VoteCreateManyCandidateInput = {
    vote_id?: string
    created_at?: Date | string
    voter_id: string
  }

  export type VoteUpdateWithoutCandidateInput = {
    vote_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    voter?: UserUpdateOneRequiredWithoutVotesNestedInput
  }

  export type VoteUncheckedUpdateWithoutCandidateInput = {
    vote_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    voter_id?: StringFieldUpdateOperationsInput | string
  }

  export type VoteUncheckedUpdateManyWithoutCandidateInput = {
    vote_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    voter_id?: StringFieldUpdateOperationsInput | string
  }

  export type AspirationCreateManyAspiration_addressInput = {
    aspiration_id?: string
    aspiration_status?: $Enums.Status
    aspiration: string
    user_id: string
  }

  export type AspirationUpdateWithoutAspiration_addressInput = {
    aspiration_id?: StringFieldUpdateOperationsInput | string
    aspiration_status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    aspiration?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutAspirationsNestedInput
  }

  export type AspirationUncheckedUpdateWithoutAspiration_addressInput = {
    aspiration_id?: StringFieldUpdateOperationsInput | string
    aspiration_status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    aspiration?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type AspirationUncheckedUpdateManyWithoutAspiration_addressInput = {
    aspiration_id?: StringFieldUpdateOperationsInput | string
    aspiration_status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    aspiration?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CandidateCountOutputTypeDefaultArgs instead
     */
    export type CandidateCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CandidateCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Aspiration_AddressCountOutputTypeDefaultArgs instead
     */
    export type Aspiration_AddressCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Aspiration_AddressCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CandidateDefaultArgs instead
     */
    export type CandidateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CandidateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VoteDefaultArgs instead
     */
    export type VoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VoteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Aspiration_AddressDefaultArgs instead
     */
    export type Aspiration_AddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Aspiration_AddressDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AspirationDefaultArgs instead
     */
    export type AspirationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AspirationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}